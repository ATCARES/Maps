From 6778773b29f87358e59bd6321b3e71f5c1c99688 Mon Sep 17 00:00:00 2001
From: Kim Eik <kim@heldig.org>
Date: Tue, 8 May 2012 14:41:20 +0200
Subject: [PATCH 19/32] Added circles and rectangles parameter to display_line

Added support for drawing rectangles and circles with all standard metadata parameters as with
lines, markers and polygons. (text bubble, links, stroke and fill styling)

this feature is available with openlayers and googlemaps.

example code:

==Circle with absolute link==
{{#display_line:|centre=Bergen|circles=Bergen:1000~link:http://www.visitbergen.com/}}

==Circle with wiki link==
{{#display_line:|centre=Bergen|circles=Bergen:1000~link:Bergen}}

==Circle with bubble (standard)==
{{#display_line:|centre=Bergen|circles=Bergen:1000~This cicrle~Is a 1000m radius of Bergen}}

==Rectangle with absolute link==
{{#display_line:|centre=Bergen|rectangles=Bergen Kalfaret:Bergen~link:http://www.visitbergen.com/}}

==Rectangle with wiki link==
{{#display_line:|centre=Bergen|rectangles=Bergen Kalfaret:Bergen~link:Bergen}}

==Rectangle with bubble (standard)==
{{#display_line:|centre=Bergen|rectangles=Bergen Kalfaret:Bergen~This rectangle~Is a busy area of Bergen}}

Other code changes:

I restructured some code (in the spirit of DRY), and came up with a solution to centralize certain common
metadata parameters through the use of interfaces. So now, all map elements (marker, lines, ....) can use a
single code library to extract their metadata properties. Basically what it does is that it checks what kind of
model object were working on, if it for example implements iBubble, then we know that this model supports the
parameters title and text, and should be populated as such.

also tried keeping to the code convention of mediawiki when it comes to spacing and indentation.

------

* added base classes
* renamed interfaces to prevent collision

Change-Id: I2599f12a2c7aa81f9c6c52226c787a859949d75b
---
 Maps.php                                           |  195 +++++++++++---------
 includes/Maps_BaseElement.php                      |   50 +++++
 includes/Maps_BaseFillableElement.php              |   42 +++++
 includes/Maps_BaseStrokableElement.php             |   65 +++++++
 includes/Maps_Circle.php                           |   73 ++++++++
 includes/Maps_Line.php                             |  174 ++---------------
 includes/Maps_Location.php                         |  110 +----------
 includes/Maps_Polygon.php                          |   85 ++++-----
 includes/Maps_Rectangle.php                        |   78 ++++++++
 includes/Maps_Utils.php                            |   14 --
 includes/features/Maps_BasePointLineMap.php        |   53 +++---
 .../Maps_CommonParameterManipulation.php           |  108 +++++++++++
 includes/manipulations/Maps_ParamCircle.php        |   34 ++++
 includes/manipulations/Maps_ParamLine.php          |   44 +----
 includes/manipulations/Maps_ParamLocation.php      |   47 ++---
 includes/manipulations/Maps_ParamPolygon.php       |   50 +----
 includes/manipulations/Maps_ParamRectangle.php     |   33 ++++
 includes/parserHooks/Maps_DisplayLine.php          |   54 +++---
 includes/properties/iBubbleMapElement.php          |   24 +++
 includes/properties/iFillableMapElement.php        |   24 +++
 includes/properties/iHoverableMapElement.php       |   13 ++
 includes/properties/iLinkableMapElement.php        |   13 ++
 includes/properties/iStrokableMapElement.php       |   33 ++++
 includes/services/GoogleMaps3/jquery.googlemap.js  |   71 +++++++
 includes/services/OpenLayers/jquery.openlayers.js  |  113 ++++++++++++
 25 files changed, 1012 insertions(+), 588 deletions(-)
 create mode 100644 includes/Maps_BaseElement.php
 create mode 100644 includes/Maps_BaseFillableElement.php
 create mode 100644 includes/Maps_BaseStrokableElement.php
 create mode 100644 includes/Maps_Circle.php
 create mode 100644 includes/Maps_Rectangle.php
 create mode 100644 includes/manipulations/Maps_CommonParameterManipulation.php
 create mode 100644 includes/manipulations/Maps_ParamCircle.php
 create mode 100644 includes/manipulations/Maps_ParamRectangle.php
 create mode 100644 includes/properties/iBubbleMapElement.php
 create mode 100644 includes/properties/iFillableMapElement.php
 create mode 100644 includes/properties/iHoverableMapElement.php
 create mode 100644 includes/properties/iLinkableMapElement.php
 create mode 100644 includes/properties/iStrokableMapElement.php

diff --git a/Maps.php b/Maps.php
index e8c43fc..82e8c18 100644
--- a/Maps.php
+++ b/Maps.php
@@ -3,9 +3,9 @@
 /**
  * Initialization file for the Maps extension.
  *
- * On MediaWiki.org: 		http://www.mediawiki.org/wiki/Extension:Maps
- * Official documentation: 	http://mapping.referata.com/wiki/Maps
- * Examples/demo's: 		http://mapping.referata.com/wiki/Maps_examples
+ * On MediaWiki.org:         http://www.mediawiki.org/wiki/Extension:Maps
+ * Official documentation:     http://mapping.referata.com/wiki/Maps
+ * Examples/demo's:         http://mapping.referata.com/wiki/Maps_examples
  *
  * @file Maps.php
  * @ingroup Maps
@@ -27,7 +27,7 @@ if ( !defined( 'MEDIAWIKI' ) ) {
 	die( 'Not an entry point.' );
 }
 
-if ( version_compare( $wgVersion, '1.18c', '<' ) ) {
+if ( version_compare( $wgVersion , '1.18c' , '<' ) ) {
 	die( '<b>Error:</b> This version of Maps requires MediaWiki 1.18 or above; use Maps 1.0.x for MediaWiki 1.17 and Maps 0.7.x for older versions.' );
 }
 
@@ -37,31 +37,31 @@ if ( !defined( 'Validator_VERSION' ) ) {
 }
 
 // Only initialize the extension when all dependencies are present.
-if ( ! defined( 'Validator_VERSION' ) ) {
+if ( !defined( 'Validator_VERSION' ) ) {
 	die( '<b>Error:</b> You need to have <a href="http://www.mediawiki.org/wiki/Extension:Validator">Validator</a> installed in order to use <a href="http://www.mediawiki.org/wiki/Extension:Maps">Maps</a>.<br />' );
 }
 
-define( 'Maps_VERSION', '1.1 alpha' );
+define( 'Maps_VERSION' , '1.1 alpha' );
 
 $wgExtensionCredits['parserhook'][] = array(
-	'path' => __FILE__,
-	'name' => 'Maps',
-	'version' => Maps_VERSION,
+	'path' => __FILE__ ,
+	'name' => 'Maps' ,
+	'version' => Maps_VERSION ,
 	'author' => array(
 		'[http://www.mediawiki.org/wiki/User:Jeroen_De_Dauw Jeroen De Dauw]'
-	),
-	'url' => 'https://www.mediawiki.org/wiki/Extension:Maps',
+	) ,
+	'url' => 'https://www.mediawiki.org/wiki/Extension:Maps' ,
 	'descriptionmsg' => 'maps-desc'
 );
 
 // The different coordinate notations.
-define( 'Maps_COORDS_FLOAT', 'float' );
-define( 'Maps_COORDS_DMS', 'dms' );
-define( 'Maps_COORDS_DM', 'dm' );
-define( 'Maps_COORDS_DD', 'dd' );
+define( 'Maps_COORDS_FLOAT' , 'float' );
+define( 'Maps_COORDS_DMS' , 'dms' );
+define( 'Maps_COORDS_DM' , 'dm' );
+define( 'Maps_COORDS_DD' , 'dd' );
 
-$egMapsScriptPath 	= ( $wgExtensionAssetsPath === false ? $wgScriptPath . '/extensions' : $wgExtensionAssetsPath ) . '/Maps';
-$egMapsDir 			= dirname( __FILE__ ) . '/';
+$egMapsScriptPath = ( $wgExtensionAssetsPath === false ? $wgScriptPath . '/extensions' : $wgExtensionAssetsPath ) . '/Maps';
+$egMapsDir = dirname( __FILE__ ) . '/';
 
 $egMapsStyleVersion = $wgStyleVersion . '-' . Maps_VERSION;
 
@@ -69,85 +69,102 @@ $wgAutoloadClasses['MapsHooks'] = dirname( __FILE__ ) . '/Maps.hooks.php';
 
 // Autoload the "includes/" classes and interfaces.
 $incDir = dirname( __FILE__ ) . '/includes/';
-$wgAutoloadClasses['MapsMapper'] 				= $incDir . 'Maps_Mapper.php';
-$wgAutoloadClasses['MapsCoordinateParser'] 		= $incDir . 'Maps_CoordinateParser.php';
-$wgAutoloadClasses['MapsDistanceParser'] 		= $incDir . 'Maps_DistanceParser.php';
-$wgAutoloadClasses['MapsGeoFunctions'] 			= $incDir . 'Maps_GeoFunctions.php';
-$wgAutoloadClasses['MapsGeocoders'] 			= $incDir . 'Maps_Geocoders.php';
-$wgAutoloadClasses['MapsGeocoder'] 				= $incDir . 'Maps_Geocoder.php';
-$wgAutoloadClasses['MapsKMLFormatter'] 			= $incDir . 'Maps_KMLFormatter.php';
-$wgAutoloadClasses['MapsLayer'] 				= $incDir . 'Maps_Layer.php';
-$wgAutoloadClasses['MapsLayerPage'] 			= $incDir . 'Maps_LayerPage.php';
-$wgAutoloadClasses['MapsLayers'] 				= $incDir . 'Maps_Layers.php';
-$wgAutoloadClasses['MapsLocation'] 				= $incDir . 'Maps_Location.php';
-$wgAutoloadClasses['MapsLine'] 				    = $incDir . 'Maps_Line.php';
-$wgAutoloadClasses['MapsPolygon'] 				= $incDir . 'Maps_Polygon.php';
-$wgAutoloadClasses['iMappingService'] 			= $incDir . 'iMappingService.php';
-$wgAutoloadClasses['MapsMappingServices'] 		= $incDir . 'Maps_MappingServices.php';
-$wgAutoloadClasses['MapsMappingService'] 		= $incDir . 'Maps_MappingService.php';
-$wgAutoloadClasses['MapsUtils']                 = $incDir . 'Maps_Utils.php';
-
-$wgAutoloadClasses['ApiGeocode'] 				= $incDir . 'api/ApiGeocode.php';
+$wgAutoloadClasses['MapsMapper'] = $incDir . 'Maps_Mapper.php';
+$wgAutoloadClasses['MapsCoordinateParser'] = $incDir . 'Maps_CoordinateParser.php';
+$wgAutoloadClasses['MapsDistanceParser'] = $incDir . 'Maps_DistanceParser.php';
+$wgAutoloadClasses['MapsGeoFunctions'] = $incDir . 'Maps_GeoFunctions.php';
+$wgAutoloadClasses['MapsGeocoders'] = $incDir . 'Maps_Geocoders.php';
+$wgAutoloadClasses['MapsGeocoder'] = $incDir . 'Maps_Geocoder.php';
+$wgAutoloadClasses['MapsKMLFormatter'] = $incDir . 'Maps_KMLFormatter.php';
+$wgAutoloadClasses['MapsLayer'] = $incDir . 'Maps_Layer.php';
+$wgAutoloadClasses['MapsLayerPage'] = $incDir . 'Maps_LayerPage.php';
+$wgAutoloadClasses['MapsLayers'] = $incDir . 'Maps_Layers.php';
+$wgAutoloadClasses['MapsLocation'] = $incDir . 'Maps_Location.php';
+$wgAutoloadClasses['MapsLine'] = $incDir . 'Maps_Line.php';
+$wgAutoloadClasses['MapsPolygon'] = $incDir . 'Maps_Polygon.php';
+$wgAutoloadClasses['MapsCircle'] = $incDir . 'Maps_Circle.php';
+$wgAutoloadClasses['MapsRectangle'] = $incDir . 'Maps_Rectangle.php';
+$wgAutoloadClasses['iMappingService'] = $incDir . 'iMappingService.php';
+$wgAutoloadClasses['MapsMappingServices'] = $incDir . 'Maps_MappingServices.php';
+$wgAutoloadClasses['MapsMappingService'] = $incDir . 'Maps_MappingService.php';
+$wgAutoloadClasses['MapsUtils'] = $incDir . 'Maps_Utils.php';
+$wgAutoloadClasses['MapsBaseElement'] = $incDir . 'Maps_BaseElement.php';
+$wgAutoloadClasses['MapsBaseFillableElement'] = $incDir . 'Maps_BaseFillableElement.php';
+$wgAutoloadClasses['MapsBaseStrokableElement'] = $incDir . 'Maps_BaseStrokableElement.php';
+
+$wgAutoloadClasses['ApiGeocode'] = $incDir . 'api/ApiGeocode.php';
+
+// Autoload includes/properties interfaces
+$propDir = dirname( __FILE__ ) . '/includes/properties/';
+$wgAutoloadClasses['iBubbleMapElement'] = $propDir . 'iBubbleMapElement.php';
+$wgAutoloadClasses['iFillableMapElement'] = $propDir . 'iFillableMapElement.php';
+$wgAutoloadClasses['iHoverableMapElement'] = $propDir . 'iHoverableMapElement.php';
+$wgAutoloadClasses['iLinkableMapElement'] = $propDir . 'iLinkableMapElement.php';
+$wgAutoloadClasses['iStrokableMapElement'] = $propDir . 'iStrokableMapElement.php';
+
 
 // Autoload the "includes/criteria/" classes.
 $criDir = $incDir . 'criteria/';
-$wgAutoloadClasses['CriterionIsDistance'] 		= $criDir . 'CriterionIsDistance.php';
-$wgAutoloadClasses['CriterionIsImage'] 			= $criDir . 'CriterionIsImage.php';
-$wgAutoloadClasses['CriterionIsLocation'] 		= $criDir . 'CriterionIsLocation.php';
-$wgAutoloadClasses['CriterionMapDimension'] 	= $criDir . 'CriterionMapDimension.php';
-$wgAutoloadClasses['CriterionMapLayer'] 		= $criDir . 'CriterionMapLayer.php';
-$wgAutoloadClasses['CriterionLine'] 	    	= $criDir . 'CriterionLine.php';
-$wgAutoloadClasses['CriterionPolygon'] 	    	= $criDir . 'CriterionPolygon.php';
-$wgAutoloadClasses['CriterionSearchMarkers'] 	= $criDir . 'CriterionSearchMarkers.php';
+$wgAutoloadClasses['CriterionIsDistance'] = $criDir . 'CriterionIsDistance.php';
+$wgAutoloadClasses['CriterionIsImage'] = $criDir . 'CriterionIsImage.php';
+$wgAutoloadClasses['CriterionIsLocation'] = $criDir . 'CriterionIsLocation.php';
+$wgAutoloadClasses['CriterionMapDimension'] = $criDir . 'CriterionMapDimension.php';
+$wgAutoloadClasses['CriterionMapLayer'] = $criDir . 'CriterionMapLayer.php';
+$wgAutoloadClasses['CriterionLine'] = $criDir . 'CriterionLine.php';
+$wgAutoloadClasses['CriterionPolygon'] = $criDir . 'CriterionPolygon.php';
+$wgAutoloadClasses['CriterionSearchMarkers'] = $criDir . 'CriterionSearchMarkers.php';
 unset( $criDir );
 
 // Autoload the "includes/features/" classes.
 $ftDir = $incDir . '/features/';
-$wgAutoloadClasses['MapsBaseMap'] 				= $ftDir . 'Maps_BaseMap.php';
-$wgAutoloadClasses['MapsBasePointMap'] 			= $ftDir . 'Maps_BasePointMap.php';
-$wgAutoloadClasses['MapsBasePointLineMap'] 	    = $ftDir . 'Maps_BasePointLineMap.php';
+$wgAutoloadClasses['MapsBaseMap'] = $ftDir . 'Maps_BaseMap.php';
+$wgAutoloadClasses['MapsBasePointMap'] = $ftDir . 'Maps_BasePointMap.php';
+$wgAutoloadClasses['MapsBasePointLineMap'] = $ftDir . 'Maps_BasePointLineMap.php';
 unset( $ftDir );
 
 // Autoload the "includes/geocoders/" classes.
 $geoDir = $incDir . 'geocoders/';
-$wgAutoloadClasses['MapsGeonamesGeocoder'] 		= $geoDir . 'Maps_GeonamesGeocoder.php';
-$wgAutoloadClasses['MapsGoogleGeocoder'] 		= $geoDir . 'Maps_GoogleGeocoder.php';
-$wgAutoloadClasses['MapsYahooGeocoder'] 		= $geoDir . 'Maps_YahooGeocoder.php';
+$wgAutoloadClasses['MapsGeonamesGeocoder'] = $geoDir . 'Maps_GeonamesGeocoder.php';
+$wgAutoloadClasses['MapsGoogleGeocoder'] = $geoDir . 'Maps_GoogleGeocoder.php';
+$wgAutoloadClasses['MapsYahooGeocoder'] = $geoDir . 'Maps_YahooGeocoder.php';
 unset( $geoDir );
 
 // Autoload the "includes/layers/" classes.
 $lyrDir = $incDir . 'layers/';
-$wgAutoloadClasses['MapsImageLayer'] 			= $lyrDir . 'Maps_ImageLayer.php';
-$wgAutoloadClasses['MapsKMLLayer'] 				= $lyrDir . 'Maps_KMLLayer.php';
+$wgAutoloadClasses['MapsImageLayer'] = $lyrDir . 'Maps_ImageLayer.php';
+$wgAutoloadClasses['MapsKMLLayer'] = $lyrDir . 'Maps_KMLLayer.php';
 unset( $lyrDir );
 
 // Autoload the "includes/manipulations/" classes.
 $manDir = $incDir . 'manipulations/';
-$wgAutoloadClasses['MapsParamDimension'] 		= $manDir . 'Maps_ParamDimension.php';
-$wgAutoloadClasses['MapsParamFile'] 			= $manDir . 'Maps_ParamFile.php';
-$wgAutoloadClasses['MapsParamGeoService'] 		= $manDir . 'Maps_ParamGeoService.php';
-$wgAutoloadClasses['MapsParamLocation'] 		= $manDir . 'Maps_ParamLocation.php';
-$wgAutoloadClasses['MapsParamService'] 			= $manDir . 'Maps_ParamService.php';
-$wgAutoloadClasses['MapsParamZoom'] 			= $manDir . 'Maps_ParamZoom.php';
-$wgAutoloadClasses['MapsParamLine'] 			= $manDir . 'Maps_ParamLine.php';
-$wgAutoloadClasses['MapsParamPolygon'] 			= $manDir . 'Maps_ParamPolygon.php';
+$wgAutoloadClasses['MapsCommonParameterManipulation'] = $manDir . 'Maps_CommonParameterManipulation.php';
+$wgAutoloadClasses['MapsParamDimension'] = $manDir . 'Maps_ParamDimension.php';
+$wgAutoloadClasses['MapsParamFile'] = $manDir . 'Maps_ParamFile.php';
+$wgAutoloadClasses['MapsParamGeoService'] = $manDir . 'Maps_ParamGeoService.php';
+$wgAutoloadClasses['MapsParamLocation'] = $manDir . 'Maps_ParamLocation.php';
+$wgAutoloadClasses['MapsParamService'] = $manDir . 'Maps_ParamService.php';
+$wgAutoloadClasses['MapsParamZoom'] = $manDir . 'Maps_ParamZoom.php';
+$wgAutoloadClasses['MapsParamLine'] = $manDir . 'Maps_ParamLine.php';
+$wgAutoloadClasses['MapsParamPolygon'] = $manDir . 'Maps_ParamPolygon.php';
+$wgAutoloadClasses['MapsParamCircle'] = $manDir . 'Maps_ParamCircle.php';
+$wgAutoloadClasses['MapsParamRectangle'] = $manDir . 'Maps_ParamRectangle.php';
 unset( $manDir );
 
 // Autoload the "includes/parserHooks/" classes.
 $phDir = $incDir . '/parserHooks/';
-$wgAutoloadClasses['MapsCoordinates'] 			= $phDir . 'Maps_Coordinates.php';
-$wgAutoloadClasses['MapsDisplayMap'] 			= $phDir . 'Maps_DisplayMap.php';
-$wgAutoloadClasses['MapsDisplayPoint'] 			= $phDir . 'Maps_DisplayPoint.php';
-$wgAutoloadClasses['MapsDisplayLine'] 			= $phDir . 'Maps_DisplayLine.php';
-$wgAutoloadClasses['MapsDistance'] 				= $phDir . 'Maps_Distance.php';
-$wgAutoloadClasses['MapsFinddestination'] 		= $phDir . 'Maps_Finddestination.php';
-$wgAutoloadClasses['MapsGeocode'] 				= $phDir . 'Maps_Geocode.php';
-$wgAutoloadClasses['MapsGeodistance'] 			= $phDir . 'Maps_Geodistance.php';
-$wgAutoloadClasses['MapsMapsDoc'] 				= $phDir . 'Maps_MapsDoc.php';
+$wgAutoloadClasses['MapsCoordinates'] = $phDir . 'Maps_Coordinates.php';
+$wgAutoloadClasses['MapsDisplayMap'] = $phDir . 'Maps_DisplayMap.php';
+$wgAutoloadClasses['MapsDisplayPoint'] = $phDir . 'Maps_DisplayPoint.php';
+$wgAutoloadClasses['MapsDisplayLine'] = $phDir . 'Maps_DisplayLine.php';
+$wgAutoloadClasses['MapsDistance'] = $phDir . 'Maps_Distance.php';
+$wgAutoloadClasses['MapsFinddestination'] = $phDir . 'Maps_Finddestination.php';
+$wgAutoloadClasses['MapsGeocode'] = $phDir . 'Maps_Geocode.php';
+$wgAutoloadClasses['MapsGeodistance'] = $phDir . 'Maps_Geodistance.php';
+$wgAutoloadClasses['MapsMapsDoc'] = $phDir . 'Maps_MapsDoc.php';
 unset( $phDir );
 unset( $incDir );
 
-$wgAPIModules['geocode'] 						= 'ApiGeocode';
+$wgAPIModules['geocode'] = 'ApiGeocode';
 
 $wgExtensionMessagesFiles['MapsMagic'] = $egMapsDir . 'Maps.i18n.magic.php';
 $wgExtensionMessagesFiles['Maps'] = $egMapsDir . 'Maps.i18n.php';
@@ -173,9 +190,9 @@ $wgHooks['CanonicalNamespaces'][] = 'MapsHooks::onCanonicalNamespaces';
 
 $egMapsFeatures = array();
 
-$egMapsFeatures['pf'][]	= 'MapsDisplayMap::initialize';
-$egMapsFeatures['pf'][]	= 'MapsDisplayPoint::initialize';
-$egMapsFeatures['pf'][]	= 'MapsDisplayLine::initialize';
+$egMapsFeatures['pf'][] = 'MapsDisplayMap::initialize';
+$egMapsFeatures['pf'][] = 'MapsDisplayPoint::initialize';
+$egMapsFeatures['pf'][] = 'MapsDisplayLine::initialize';
 
 # Parser hooks
 
@@ -239,31 +256,31 @@ $egMapsSettings = array();
 // Include the settings file.
 require_once $egMapsDir . 'Maps_Settings.php';
 
-define( 'Maps_NS_LAYER', 		$egMapsNamespaceIndex + 0 );
-define( 'Maps_NS_LAYER_TALK', 	$egMapsNamespaceIndex + 1 );
+define( 'Maps_NS_LAYER' , $egMapsNamespaceIndex + 0 );
+define( 'Maps_NS_LAYER_TALK' , $egMapsNamespaceIndex + 1 );
 
 $wgResourceModules['ext.maps.common'] = array(
-	'localBasePath' => dirname( __FILE__ ) . '/includes',
-	'remoteBasePath' => $egMapsScriptPath . '/includes',
-	'group' => 'ext.maps',
+	'localBasePath' => dirname( __FILE__ ) . '/includes' ,
+	'remoteBasePath' => $egMapsScriptPath . '/includes' ,
+	'group' => 'ext.maps' ,
 	'messages' => array(
-		'maps-load-failed',
-	),
+		'maps-load-failed' ,
+	) ,
 	'scripts' => array(
 		'ext.maps.common.js'
 	)
 );
 
 $wgResourceModules['ext.maps.coord'] = array(
-	'localBasePath' => dirname( __FILE__ ) . '/includes',
-	'remoteBasePath' => $egMapsScriptPath . '/includes',
-	'group' => 'ext.maps',
+	'localBasePath' => dirname( __FILE__ ) . '/includes' ,
+	'remoteBasePath' => $egMapsScriptPath . '/includes' ,
+	'group' => 'ext.maps' ,
 	'messages' => array(
-		'maps-abb-north',
-		'maps-abb-east',
-		'maps-abb-south',
-		'maps-abb-west',
-	),
+		'maps-abb-north' ,
+		'maps-abb-east' ,
+		'maps-abb-south' ,
+		'maps-abb-west' ,
+	) ,
 	'scripts' => array(
 		'ext.maps.coord.js'
 	)
@@ -277,7 +294,7 @@ $wgAvailableRights[] = 'geocode';
 
 # Users that can geocode. By default the same as those that can edit.
 foreach ( $wgGroupPermissions as $group => $rights ) {
-	if ( array_key_exists( 'edit', $rights ) ) {
+	if ( array_key_exists( 'edit' , $rights ) ) {
 		$wgGroupPermissions[$group]['geocode'] = $wgGroupPermissions[$group]['edit'];
 	}
 }
diff --git a/includes/Maps_BaseElement.php b/includes/Maps_BaseElement.php
new file mode 100644
index 0000000..c2ca9f8
--- /dev/null
+++ b/includes/Maps_BaseElement.php
@@ -0,0 +1,50 @@
+<?php
+/**
+ * @since 1.1
+ */
+abstract class MapsBaseElement implements iBubbleMapElement , iLinkableMapElement {
+
+	protected $title;
+	protected $text;
+	protected $link;
+
+	public function getTitle() {
+		return $this->title;
+	}
+
+	public function setTitle( $title ) {
+		$this->title = $title;
+	}
+
+	public function getText() {
+		return $this->text;
+	}
+
+	public function setText( $text ) {
+		$this->text = $text;
+	}
+
+	public function getLink() {
+		return $this->link;
+	}
+
+	public function setLink( $link ) {
+		$this->link = $link;
+	}
+
+	public function hasTitle() {
+		return $this->title !== '';
+	}
+
+	public function hasText() {
+		return $this->text !== '';
+	}
+
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+		return array(
+			'text' => $this->hasText() ? $this->getText() : $defText ,
+			'title' => $this->hasTitle() ? $this->getTitle() : $defTitle ,
+			'link' => $this->getLink() ,
+		);
+	}
+}
diff --git a/includes/Maps_BaseFillableElement.php b/includes/Maps_BaseFillableElement.php
new file mode 100644
index 0000000..2c7d2ce
--- /dev/null
+++ b/includes/Maps_BaseFillableElement.php
@@ -0,0 +1,42 @@
+<?php
+/**
+ * @since 1.1
+ */
+class MapsBaseFillableElement extends MapsBaseStrokableElement implements iFillableMapElement {
+
+	protected $fillColor;
+	protected $fillOpacity;
+
+	public function getFillColor() {
+		return $this->fillColor;
+	}
+
+	public function setFillColor( $fillColor ) {
+		$this->fillColor = $fillColor;
+	}
+
+	public function getFillOpacity() {
+		return $this->fillOpacity;
+	}
+
+	public function setFillOpacity( $fillOpacity ) {
+		$this->fillOpacity = $fillOpacity;
+	}
+
+	public function hasFillColor() {
+		return !is_null( $this->fillColor ) && $this->fillColor !== '';
+	}
+
+	public function hasFillOpacity() {
+		return !is_null( $this->fillOpacity ) && $this->fillOpacity !== '';
+	}
+
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$array = array(
+			'fillColor' => $this->hasFillColor() ? $this->getFillColor() : '#FF0000' ,
+			'fillOpacity' => $this->hasFillOpacity() ? $this->getFillOpacity() : '0.5' ,
+		);
+		return array_merge( $parentArray , $array );
+	}
+}
diff --git a/includes/Maps_BaseStrokableElement.php b/includes/Maps_BaseStrokableElement.php
new file mode 100644
index 0000000..c62a41a
--- /dev/null
+++ b/includes/Maps_BaseStrokableElement.php
@@ -0,0 +1,65 @@
+<?php
+/**
+ * @since 1.1
+ */
+class MapsBaseStrokableElement extends MapsBaseElement implements iStrokableMapElement {
+
+	protected $strokeColor;
+	protected $strokeOpacity;
+	protected $strokeWeight;
+
+	public function getStrokeColor() {
+		return $this->strokeColor;
+	}
+
+	public function setStrokeColor( $strokeColor ) {
+		$this->strokeColor = $strokeColor;
+	}
+
+	public function getStrokeOpacity() {
+		return $this->strokeOpacity;
+	}
+
+	public function setStrokeOpacity( $strokeOpacity ) {
+		$this->strokeOpacity = $strokeOpacity;
+	}
+
+	public function getStrokeWeight() {
+		return $this->strokeWeight;
+	}
+
+	public function setStrokeWeight( $strokeWeight ) {
+		$this->strokeWeight = $strokeWeight;
+	}
+
+	public function hasText() {
+		return !is_null( $this->text ) && $this->text !== '';
+	}
+
+	public function hasTitle() {
+		return !is_null( $this->title ) && $this->title !== '';
+	}
+
+	public function hasStrokeColor() {
+		return !is_null( $this->strokeColor ) && $this->strokeColor !== '';
+	}
+
+	public function hasStrokeOpacity() {
+		return !is_null( $this->strokeOpacity ) && $this->strokeOpacity !== '';
+	}
+
+	public function hasStrokeWeight() {
+		return !is_null( $this->strokeWeight ) && $this->strokeWeight !== '';
+	}
+
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$array = array(
+			'strokeColor' => $this->hasStrokeColor() ? $this->getStrokeColor() : '#FF0000' ,
+			'strokeOpacity' => $this->hasStrokeOpacity() ? $this->getStrokeOpacity() : '1' ,
+			'strokeWeight' => $this->hasStrokeWeight() ? $this->getStrokeWeight() : '2'
+		);
+		return array_merge( $parentArray , $array );
+	}
+
+}
diff --git a/includes/Maps_Circle.php b/includes/Maps_Circle.php
new file mode 100644
index 0000000..ee76e17
--- /dev/null
+++ b/includes/Maps_Circle.php
@@ -0,0 +1,73 @@
+<?php
+/**
+ * Class that holds metadata on circles made up by locations on map.
+ *
+ * @since 1.1
+ *
+ * @file Maps_Circle.php
+ * @ingroup Maps
+ *
+ * @licence GNU GPL v3
+ * @author Kim Eik < kim@heldig.org >
+ */
+class MapsCircle extends MapsBaseFillableElement {
+
+	/**
+	 * @var
+	 */
+	protected $circleCentre;
+
+	/**
+	 * @var
+	 */
+	protected $circleRadius;
+
+	/**
+	 *
+	 */
+	function __construct( $circleCentre , $circleRadius ) {
+		$this->setCircleCentre( $circleCentre );
+		$this->setCircleRadius( $circleRadius );
+	}
+
+	/**
+	 * @return
+	 */
+	public function getCircleCentre() {
+		return $this->circleCentre;
+	}
+
+	/**
+	 * @param  $circleCentre
+	 */
+	public function setCircleCentre( $circleCentre ) {
+		$this->circleCentre = new MapsLocation( $circleCentre );
+	}
+
+	/**
+	 * @return
+	 */
+	public function getCircleRadius() {
+		return $this->circleRadius;
+	}
+
+	/**
+	 * @param  $circleRadius
+	 */
+	public function setCircleRadius( $circleRadius ) {
+		$this->circleRadius = $circleRadius;
+	}
+
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$array = array(
+			'centre' => array(
+				'lon' => $this->getCircleCentre()->getLongitude() ,
+				'lat' => $this->getCircleCentre()->getLatitude()
+			) ,
+			'radius' => intval( $this->getCircleRadius() ) ,
+		);
+		return array_merge( $parentArray , $array );
+	}
+}
diff --git a/includes/Maps_Line.php b/includes/Maps_Line.php
index 18ce78d..08512d7 100644
--- a/includes/Maps_Line.php
+++ b/includes/Maps_Line.php
@@ -10,8 +10,7 @@
  * @licence GNU GPL v3
  * @author Kim Eik < kim@heldig.org >
  */
-class MapsLine{
-
+class MapsLine extends MapsBaseStrokableElement {
 
 	/**
 	 * @var
@@ -19,181 +18,34 @@ class MapsLine{
 	protected $lineCoords;
 
 	/**
-	 * @var
-	 */
-	protected $title;
-
-	/**
-	 * @var
-	 */
-	protected $text;
-
-	/**
-	 * @var
-	 */
-	protected $strokeColor;
-	/**
-	 * @var
-	 */
-	protected $strokeOpacity;
-	/**
-	 * @var
-	 */
-	protected $strokeWeight;
-
-	/**
-	 * @var
-	 */
-	protected $link;
-
-	/**
 	 *
 	 */
-	function __construct($coords)
-	{
-		$this->setLineCoords($coords);
-	}
-
-	/**
-	 * @param \text $text
-	 */
-	public function setText($text)
-	{
-		$this->text = $text;
-	}
-
-	/**
-	 * @return \text
-	 */
-	public function getText()
-	{
-		return $this->text;
-	}
-
-	/**
-	 * @param \title $title
-	 */
-	public function setTitle($title)
-	{
-		$this->title = $title;
+	function __construct( $coords ) {
+		$this->setLineCoords( $coords );
 	}
 
-	/**
-	 * @return \title
-	 */
-	public function getTitle()
-	{
-		return $this->title;
-	}
 
-	protected function setLineCoords($lineCoords)
-	{
-		foreach($lineCoords as $lineCoord){
-			$this->lineCoords[] = new MapsLocation($lineCoord);
+	protected function setLineCoords( $lineCoords ) {
+		foreach ( $lineCoords as $lineCoord ) {
+			$this->lineCoords[] = new MapsLocation( $lineCoord );
 		}
 	}
 
-	protected function getLineCoords()
-	{
+	protected function getLineCoords() {
 		return $this->lineCoords;
 	}
 
-	public function getJSONObject( $defText = '', $defTitle = '') {
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
 		$posArray = array();
-		foreach ($this->lineCoords as $mapLocation){
+		foreach ( $this->lineCoords as $mapLocation ) {
 			$posArray[] = array(
-				'lat' => $mapLocation->getLatitude(),
+				'lat' => $mapLocation->getLatitude() ,
 				'lon' => $mapLocation->getLongitude()
 			);
 		}
+		$posArray = array( 'pos' => $posArray );
 
-		return array(
-			'pos' => $posArray,
-			'text' => $this->hasText() ? $this->getText() : $defText,
-			'title' => $this->hasTitle() ? $this->getTitle() : $defTitle,
-			'link' => $this->getLink(),
-			'strokeColor' => $this->hasStrokeColor() ? $this->getStrokeColor() : '#FF0000',
-			'strokeOpacity' => $this->hasStrokeOpacity() ? $this->getStrokeOpacity() : '1',
-			'strokeWeight' => $this->hasStrokeWeight() ? $this->getStrokeWeight() : '2'
-		);
-	}
-
-
-	/**
-	 * @param  $strokeColor
-	 */
-	public function setStrokeColor($strokeColor)
-	{
-		$this->strokeColor = $strokeColor;
-	}
-
-	/**
-	 * @return
-	 */
-	public function getStrokeColor()
-	{
-		return $this->strokeColor;
-	}
-
-	/**
-	 * @param  $strokeOpacity
-	 */
-	public function setStrokeOpacity($strokeOpacity)
-	{
-		$this->strokeOpacity = $strokeOpacity;
-	}
-
-	/**
-	 * @return
-	 */
-	public function getStrokeOpacity()
-	{
-		return $this->strokeOpacity;
-	}
-
-	/**
-	 * @param  $strokeWeight
-	 */
-	public function setStrokeWeight($strokeWeight)
-	{
-		$this->strokeWeight = $strokeWeight;
-	}
-
-	/**
-	 * @return
-	 */
-	public function getStrokeWeight()
-	{
-		return $this->strokeWeight;
-	}
-
-	public function setLink($link){
-		$this->link = $link;
-	}
-
-	public function getLink(){
-		return $this->link;
-	}
-
-
-	public function hasText(){
-		return !is_null($this->text) && $this->text !== '';
-	}
-
-	public function hasTitle(){
-		return !is_null($this->title) && $this->title !== '';
-	}
-
-	public function hasStrokeColor(){
-		return !is_null($this->strokeColor) && $this->strokeColor !== '';
-	}
-
-	public function hasStrokeOpacity(){
-		return !is_null($this->strokeOpacity) && $this->strokeOpacity !== '';
-	}
-
-
-	public function hasStrokeWeight(){
-		return !is_null($this->strokeWeight) && $this->strokeWeight !== '';
+		return array_merge( $parentArray , $posArray );
 	}
 }
diff --git a/includes/Maps_Location.php b/includes/Maps_Location.php
index e9b63f0..aab6ba9 100644
--- a/includes/Maps_Location.php
+++ b/includes/Maps_Location.php
@@ -12,7 +12,7 @@
  * @author Jeroen De Dauw < jeroendedauw@gmail.com >
  * @author Daniel Werner
  */
-class MapsLocation {
+class MapsLocation extends MapsBaseElement {
 
 	/**
 	 * @since 0.7.1
@@ -47,20 +47,6 @@ class MapsLocation {
 	 *
 	 * @var string
 	 */
-	protected $title = '';
-
-	/**
-	 * @since 0.7.2
-	 *
-	 * @var string
-	 */
-	protected $text = '';
-
-	/**
-	 * @since 0.7.2
-	 *
-	 * @var string
-	 */
 	protected $icon = '';
 
 	/**
@@ -105,11 +91,6 @@ class MapsLocation {
 	protected $inlineLabel;
 
 	/**
-	 * @var
-	 */
-	protected $link;
-
-	/**
 	 * Creates and returns a new instance of a MapsLocation from a latitude and longitude.
 	 *
 	 * @since 1.0
@@ -305,27 +286,6 @@ class MapsLocation {
 		return $this->address;
 	}
 
-	/**
-	 * Sets the title.
-	 *
-	 * @since 0.7.2
-	 *
-	 * @param string $title
-	 */
-	public function setTitle( $title ) {
-		$this->title = trim( $title );
-	}
-
-	/**
-	 * Sets the text.
-	 *
-	 * @since 0.7.2
-	 *
-	 * @param string $text
-	 */
-	public function setText( $text ) {
-		$this->text = trim( $text );
-	}
 
 	/**
 	 * Returns if there is any icon.
@@ -361,50 +321,6 @@ class MapsLocation {
 	}
 
 	/**
-	 * Returns if there is any title.
-	 *
-	 * @since 1.0
-	 *
-	 * @return boolean
-	 */
-	public function hasTitle() {
-		return $this->title !== '';
-	}
-
-	/**
-	 * Returns the title.
-	 *
-	 * @since 0.7.2
-	 *
-	 * @return string
-	 */
-	public function getTitle() {
-		return $this->title;
-	}
-
-	/**
-	 * Returns if there is any text.
-	 *
-	 * @since 1.0
-	 *
-	 * @return boolean
-	 */
-	public function hasText() {
-		return $this->text !== '';
-	}
-
-	/**
-	 * Returns the text.
-	 *
-	 * @since 0.7.2
-	 *
-	 * @return string
-	 */
-	public function getText() {
-		return $this->text;
-	}
-
-	/**
 	 * Returns the icon.
 	 *
 	 * @since 0.7.2
@@ -437,23 +353,6 @@ class MapsLocation {
 		return $this->group != '';
 	}
 
-
-	/**
-	 * @return
-	 */
-	public function getLink()
-	{
-		return $this->link;
-	}
-
-	/**
-	 * @param  $link
-	 */
-	public function setLink($link)
-	{
-		$this->link = $link;
-	}
-
 	/**
 	 * @return string
 	 */
@@ -489,18 +388,17 @@ class MapsLocation {
 	 * @return object
 	 */
 	public function getJSONObject( $defText = '', $defTitle = '', $defIconUrl = '', $defGroup = '', $defInlineLabel = '' ) {
-		return array(
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$array = array(
 			'lat' => $this->getLatitude(),
 			'lon' => $this->getLongitude(),
 			'alt' => $this->getAltitude(),
-			'text' => $this->hasText() ? $this->getText() : $defText,
-			'title' => $this->hasTitle() ? $this->getTitle() : $defTitle,
 			'address' => $this->getAddress( false ),
 			'icon' => $this->hasIcon() ? MapsMapper::getFileUrl( $this->getIcon() ) : $defIconUrl,
 			'group' => $this->hasGroup() ?  $this->getGroup() : $defGroup,
 			'inlineLabel' => $this->hasInlineLabel() ? $this->getInlineLabel() : $defInlineLabel,
-			'link' => $this->getLink(),
 		);
+		return array_merge( $parentArray , $array );
 	}
 
 }
diff --git a/includes/Maps_Polygon.php b/includes/Maps_Polygon.php
index db4e7ed..ee3bfd7 100644
--- a/includes/Maps_Polygon.php
+++ b/includes/Maps_Polygon.php
@@ -10,87 +10,66 @@
  * @licence GNU GPL v3
  * @author Kim Eik < kim@heldig.org >
  */
-class MapsPolygon extends MapsLine{
-
-
-	/**
-	 * @var
-	 */
-	protected $fillColor;
+class MapsPolygon extends MapsBaseFillableElement implements iHoverableMapElement {
 
 	/**
 	 * @var
 	 */
-	protected $fillOpacity;
+	protected $polygonCoords;
 
 	/**
 	 * @var
 	 */
 	protected $onlyVisibleOnHover = false;
 
-
-	public function getJSONObject( $defText = '', $defTitle = '') {
-		$parentArray = parent::getJSONObject($defText,$defTitle);
-		$array = array(
-			'fillColor' => $this->hasFillColor() ? $this->getFillColor() : '#FF0000',
-			'fillOpacity' => $this->hasFillOpacity() ? $this->getFillOpacity() : 0.5,
-			'onlyVisibleOnHover' => $this->isOnlyVisibleOnHover(),
-		);
-		return array_merge($parentArray,$array);
-	}
-
-	private function hasFillColor(){
-		return !is_null($this->fillColor) && $this->fillColor !== '';
-	}
-
-	private function hasFillOpacity(){
-		return !is_null($this->fillOpacity) && $this->fillOpacity !== '';
-	}
-
 	/**
-	 * @return
+	 *
 	 */
-	public function getFillOpacity()
-	{
-		return $this->fillOpacity;
+	function __construct( $coords ) {
+		$this->setPolygonCoords( $coords );
 	}
 
-	/**
-	 * @param  $fillOpacity
-	 */
-	public function setFillOpacity($fillOpacity)
-	{
-		$this->fillOpacity = $fillOpacity;
+	protected function setPolygonCoords( $polygonCoords ) {
+		foreach ( $polygonCoords as $polygonCoord ) {
+			$this->polygonCoords[] = new MapsLocation( $polygonCoord );
+		}
 	}
 
-	/**
-	 * @return
-	 */
-	public function getFillColor()
-	{
-		return $this->fillColor;
-	}
-
-	/**
-	 * @param  $fillColor
-	 */
-	public function setFillColor($fillColor)
-	{
-		$this->fillColor = $fillColor;
+	protected function getPolygonCoords() {
+		return $this->polygonCoords;
 	}
 
 	/**
 	 * @param $visible
 	 */
-	public function setOnlyVisibleOnHover($visible){
+	public function setOnlyVisibleOnHover( $visible ) {
 		$this->onlyVisibleOnHover = $visible;
 	}
 
 	/**
 	 * @return mixed
 	 */
-	public function isOnlyVisibleOnHover(){
+	public function isOnlyVisibleOnHover() {
 		return $this->onlyVisibleOnHover;
 	}
 
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$posArray = array();
+
+		foreach ( $this->polygonCoords as $mapLocation ) {
+			$posArray[] = array(
+				'lat' => $mapLocation->getLatitude() ,
+				'lon' => $mapLocation->getLongitude()
+			);
+		}
+
+		$array = array(
+			'pos' => $posArray ,
+			'onlyVisibleOnHover' => $this->isOnlyVisibleOnHover() ,
+		);
+
+		return array_merge( $parentArray , $array );
+	}
 }
diff --git a/includes/Maps_Rectangle.php b/includes/Maps_Rectangle.php
new file mode 100644
index 0000000..222abfe
--- /dev/null
+++ b/includes/Maps_Rectangle.php
@@ -0,0 +1,78 @@
+<?php
+/**
+ * Class that holds metadata on rectangles made up by locations on map.
+ *
+ * @since 1.1
+ *
+ * @file Maps_Rectangle.php
+ * @ingroup Maps
+ *
+ * @licence GNU GPL v3
+ * @author Kim Eik < kim@heldig.org >
+ */
+class MapsRectangle extends MapsBaseFillableElement {
+
+
+	/**
+	 * @var
+	 */
+	protected $rectangleNorthEast;
+
+	/**
+	 * @var
+	 */
+	protected $rectangleSouthWest;
+
+	/**
+	 *
+	 */
+	function __construct( $rectangleNorthEast , $rectangleSouthWest ) {
+		$this->setRectangleNorthEast( $rectangleNorthEast );
+		$this->setRectangleSouthWest( $rectangleSouthWest );
+	}
+
+	/**
+	 * @return
+	 */
+	public function getRectangleNorthEast() {
+		return $this->rectangleNorthEast;
+	}
+
+	/**
+	 * @param  $rectangleNorthEast
+	 */
+	public function setRectangleNorthEast( $rectangleNorthEast ) {
+		$this->rectangleNorthEast = new MapsLocation( $rectangleNorthEast );
+	}
+
+	/**
+	 * @return
+	 */
+	public function getRectangleSouthWest() {
+		return $this->rectangleSouthWest;
+	}
+
+	/**
+	 * @param  $rectangleSouthWest
+	 */
+	public function setRectangleSouthWest( $rectangleSouthWest ) {
+		$this->rectangleSouthWest = new MapsLocation( $rectangleSouthWest );
+	}
+
+	public function getJSONObject( $defText = '' , $defTitle = '' ) {
+
+		$parentArray = parent::getJSONObject( $defText , $defTitle );
+		$array = array(
+			'ne' => array(
+				'lon' => $this->getRectangleNorthEast()->getLongitude() ,
+				'lat' => $this->getRectangleNorthEast()->getLatitude()
+			) ,
+			'sw' => array(
+				'lon' => $this->getRectangleSouthWest()->getLongitude() ,
+				'lat' => $this->getRectangleSouthWest()->getLatitude()
+			) ,
+		);
+
+		return array_merge( $parentArray , $array );
+	}
+}
diff --git a/includes/Maps_Utils.php b/includes/Maps_Utils.php
index dfc0361..3f4d158 100644
--- a/includes/Maps_Utils.php
+++ b/includes/Maps_Utils.php
@@ -15,20 +15,6 @@ class MapsUtils {
 
 
 	/**
-	 * Checks if a string is prefixed with link:
-	 * @static
-	 * @param $link
-	 * @return bool|string
-	 * @since 1.1
-	 */
-	public static function isLinkParameter( $link ) {
-		if ( self::strStartsWith( $link , 'link:' ) ) {
-			return substr( $link , 5 );
-		}
-		return false;
-	}
-
-	/**
 	 * Helper function that returns true if a $haystack (string) starts with $needle
 	 * @static
 	 * @param $haystack
diff --git a/includes/features/Maps_BasePointLineMap.php b/includes/features/Maps_BasePointLineMap.php
index b965052..05f3f47 100644
--- a/includes/features/Maps_BasePointLineMap.php
+++ b/includes/features/Maps_BasePointLineMap.php
@@ -7,34 +7,31 @@
  *
  * @author Kim Eik
  */
-class MapsBasePointLineMap extends MapsBasePointMap{
-
-    protected function handleMarkerData(array &$params, Parser $parser)
-    {
-        parent::handleMarkerData($params, $parser);
-
-        $parserClone = clone $parser;
-
-        foreach($params['lines'] as &$line){
-
-            $line['title'] = $parserClone->parse( $line['title'], $parserClone->getTitle(), new ParserOptions() )->getText();
-            $line['text'] = $parserClone->parse( $line['text'], $parserClone->getTitle(), new ParserOptions() )->getText();
-
-            $hasTitleAndtext = $line['title'] !== '' && $line['text'] !== '';
-            $line['text'] = ( $hasTitleAndtext ? '<b>' . $line['title'] . '</b><hr />' : $line['title'] ) . $line['text'];
-            $line['title'] = strip_tags( $line['title'] );
-        }
-
-        foreach($params['polygons'] as &$polygon){
-
-            $polygon['title'] = $parserClone->parse( $polygon['title'], $parserClone->getTitle(), new ParserOptions() )->getText();
-            $polygon['text'] = $parserClone->parse( $polygon['text'], $parserClone->getTitle(), new ParserOptions() )->getText();
-
-            $hasTitleAndtext = $polygon['title'] !== '' && $polygon['text'] !== '';
-            $polygon['text'] = ( $hasTitleAndtext ? '<b>' . $polygon['title'] . '</b><hr />' : $polygon['title'] ) . $polygon['text'];
-            $polygon['title'] = strip_tags( $polygon['title'] );
-        }
-    }
+class MapsBasePointLineMap extends MapsBasePointMap {
+
+	protected function handleMarkerData( array &$params , Parser $parser ) {
+		parent::handleMarkerData( $params , $parser );
+
+		$parserClone = clone $parser;
+
+		$textContainers = array(
+			&$params['lines'] ,
+			&$params['polygons'] ,
+			&$params['circles'] ,
+			&$params['rectangles']
+		);
+
+		foreach ( $textContainers as &$textContainer ) {
+			foreach ( $textContainer as &$obj ) {
+				$obj['title'] = $parserClone->parse( $obj['title'] , $parserClone->getTitle() , new ParserOptions() )->getText();
+				$obj['text'] = $parserClone->parse( $obj['text'] , $parserClone->getTitle() , new ParserOptions() )->getText();
+
+				$hasTitleAndtext = $obj['title'] !== '' && $obj['text'] !== '';
+				$obj['text'] = ( $hasTitleAndtext ? '<b>' . $obj['title'] . '</b><hr />' : $obj['title'] ) . $obj['text'];
+				$obj['title'] = strip_tags( $obj['title'] );
+			}
+		}
+	}
 
 
 }
diff --git a/includes/manipulations/Maps_CommonParameterManipulation.php b/includes/manipulations/Maps_CommonParameterManipulation.php
new file mode 100644
index 0000000..badd365
--- /dev/null
+++ b/includes/manipulations/Maps_CommonParameterManipulation.php
@@ -0,0 +1,108 @@
+<?php
+/**
+ * Class with public static methods to handle shared parameter definitions
+ * based on interfaces.
+ */
+abstract class MapsCommonParameterManipulation extends ItemParameterManipulation {
+
+
+	/**
+	 * This method requires that parameters are positionally correct,
+	 * 1. Link (one parameter) or bubble data (two parameters)
+	 * 2. Stroke data (three parameters)
+	 * 3. Fill data (two parameters)
+	 * e.g ...title~text~strokeColor~strokeOpacity~strokeWeight~fillColor~fillOpacity
+	 * @static
+	 * @param $obj
+	 * @param $metadataParams
+	 */
+	protected function handleCommonParams( array &$params , &$model ) {
+
+		//Handle bubble and link parameters
+		if ( $model instanceof iBubbleMapElement && $model instanceof iLinkableMapElement ) {
+			//create link data
+			$linkOrTitle = array_shift( $params );
+			if ( $link = $this->isLinkParameter( $linkOrTitle ) ) {
+				$this->setLinkFromParameter( $model , $link );
+			} else {
+				//create bubble data
+				$this->setBubbleDataFromParameter( $model , $params , $linkOrTitle );
+			}
+		} else if ( $model instanceof iLinkableMapElement ) {
+			//only supports links
+			$link = array_shift( $params );
+			if ( $link = $this->isLinkParameter( $link ) ) {
+				$this->setLinkFromParameter( $model , $link );
+			}
+		} else if ( $model instanceof iBubbleMapElement ) {
+			//only supports bubbles
+			$title = array_shift( $params );
+			$this->setBubbleDataFromParameter( $model , $params , $title );
+		}
+
+		//handle stroke parameters
+		if ( $model instanceof iStrokableMapElement ) {
+			if ( $color = array_shift( $params ) ) {
+				$model->setStrokeColor( $color );
+			}
+
+			if ( $opacity = array_shift( $params ) ) {
+				$model->setStrokeOpacity( $opacity );
+			}
+
+			if ( $weight = array_shift( $params ) ) {
+				$model->setStrokeWeight( $weight );
+			}
+		}
+
+		//handle fill parameters
+		if ( $model instanceof iFillableMapElement ) {
+			if ( $fillColor = array_shift( $params ) ) {
+				$model->setFillColor( $fillColor );
+			}
+
+			if ( $fillOpacity = array_shift( $params ) ) {
+				$model->setFillOpacity( $fillOpacity );
+			}
+		}
+
+		//handle hover parameter
+		if ( $params instanceof iHoverableMapElement ) {
+			if ( $visibleOnHover = array_shift( $parts ) ) {
+				$model->setOnlyVisibleOnHover( filter_var( $visibleOnHover , FILTER_VALIDATE_BOOLEAN ) );
+			}
+		}
+	}
+
+	private function setBubbleDataFromParameter( &$model , &$params , $title ) {
+		if ( $title ) {
+			$model->setTitle( $title );
+		}
+		if ( $text = array_shift( $params ) ) {
+			$model->setText( $text );
+		}
+	}
+
+	private function setLinkFromParameter( &$model , $link ) {
+		if ( MapsUtils::isValidURL( $link ) ) {
+			$model->setLink( $link );
+		} else {
+			$title = Title::newFromText( $link );
+			$model->setLink( $title->getFullURL() );
+		}
+	}
+
+	/**
+	 * Checks if a string is prefixed with link:
+	 * @static
+	 * @param $link
+	 * @return bool|string
+	 * @since 1.1
+	 */
+	private function isLinkParameter( $link ) {
+		if ( MapsUtils::strStartsWith( $link , 'link:' ) ) {
+			return substr( $link , 5 );
+		}
+		return false;
+	}
+}
diff --git a/includes/manipulations/Maps_ParamCircle.php b/includes/manipulations/Maps_ParamCircle.php
new file mode 100644
index 0000000..137554d
--- /dev/null
+++ b/includes/manipulations/Maps_ParamCircle.php
@@ -0,0 +1,34 @@
+<?php
+class MapsParamCircle extends MapsCommonParameterManipulation {
+
+
+	protected $metaDataSeparator;
+
+	public function __construct( $metaDataSeparator ) {
+		parent::__construct();
+
+		$this->metaDataSeparator = $metaDataSeparator;
+	}
+
+	/**
+	 * Manipulate an actual value.
+	 *
+	 * @param string $value
+	 * @param Parameter $parameter
+	 * @param array $parameters
+	 *
+	 * @since 0.4
+	 *
+	 * @return mixed
+	 */
+	protected function doManipulation( &$value , Parameter $parameter , array &$parameters ) {
+		$parts = explode( $this->metaDataSeparator , $value );
+		$circleData = explode( ':' , array_shift( $parts ) );
+
+		$value = new MapsCircle( $circleData[0] , $circleData[1] );
+
+		$this->handleCommonParams( $parts , $value );
+
+		$value = $value->getJSONObject();
+	}
+}
\ No newline at end of file
diff --git a/includes/manipulations/Maps_ParamLine.php b/includes/manipulations/Maps_ParamLine.php
index 5d714f0..e763caf 100644
--- a/includes/manipulations/Maps_ParamLine.php
+++ b/includes/manipulations/Maps_ParamLine.php
@@ -1,6 +1,5 @@
 <?php
-class MapsParamLine extends ItemParameterManipulation {
-
+class MapsParamLine extends MapsCommonParameterManipulation {
 
 
 	protected $metaDataSeparator;
@@ -22,42 +21,13 @@ class MapsParamLine extends ItemParameterManipulation {
 	 *
 	 * @return mixed
 	 */
-	public function doManipulation(&$value, Parameter $parameter, array &$parameters)
-	{
-	  $parts = explode($this->metaDataSeparator,$value);
-	  $lineCoords = explode(':',array_shift($parts));
-
-	  $value = new MapsLine($lineCoords);
-	  $linkOrTitle =  array_shift($parts);
-	  if($link = MapsUtils::isLinkParameter($linkOrTitle)){
-		  if(MapsUtils::isValidURL($link)){
-			  $value->setLink($link);
-		  }else{
-			  $title = Title::newFromText($link);
-			  $value->setLink($title->getFullURL());
-		  }
-	  }else{
-		  //create bubble data
-		  if($linkOrTitle){
-			$value->setTitle($linkOrTitle);
-		  }
-		  if($text = array_shift($parts)){
-				$value->setText($text);
-		  }
-	  }
-
-	  if($color = array_shift($parts)){
-			$value->setStrokeColor($color);
-	  }
-
-	  if($opacity = array_shift($parts)){
-		 $value->setStrokeOpacity($opacity);
-	  }
+	public function doManipulation( &$value , Parameter $parameter , array &$parameters ) {
+		$parts = explode( $this->metaDataSeparator , $value );
+		$lineCoords = explode( ':' , array_shift( $parts ) );
 
-	  if($weight = array_shift($parts)){
-		$value->setStrokeWeight($weight);
-	  }
+		$value = new MapsLine( $lineCoords );
+		$this->handleCommonParams( $parts , $value );
 
-	  $value = $value->getJSONObject();
+		$value = $value->getJSONObject();
 	}
 }
\ No newline at end of file
diff --git a/includes/manipulations/Maps_ParamLocation.php b/includes/manipulations/Maps_ParamLocation.php
index d61b0e3..bc9c48a 100644
--- a/includes/manipulations/Maps_ParamLocation.php
+++ b/includes/manipulations/Maps_ParamLocation.php
@@ -2,9 +2,9 @@
 
 /**
  * Parameter manipulation turning the value into a MapsLocation object.
- * 
+ *
  * @since 0.7.2
- * 
+ *
  * @file Maps_ParamLocation.php
  * @ingroup Maps
  * @ingroup ParameterManipulations
@@ -13,66 +13,50 @@
  * @author Jeroen De Dauw < jeroendedauw@gmail.com >
  * @author Daniel Werner
  */
-class MapsParamLocation extends ItemParameterManipulation {
+class MapsParamLocation extends MapsCommonParameterManipulation {
 
 	/**
 	 * In some usecases, the parameter values will contain extra location
 	 * metadata, which should be ignored here. This field holds the delimiter
 	 * used to separate this data from the actual location.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @var string
 	 */
 	protected $metaDataSeparator;
 
 	/**
 	 * Should the location be turned into a JSON object.
-	 * 
+	 *
 	 * @var boolean
 	 */
 	public $toJSONObj = false;
 
 	/**
 	 * Constructor.
-	 * 
+	 *
 	 * @since 0.7.2
 	 */
 	public function __construct( $metaDataSeparator = false ) {
 		parent::__construct();
 
-		$this->metaDataSeparator = $metaDataSeparator;		
+		$this->metaDataSeparator = $metaDataSeparator;
 	}
 
 	/**
 	 * @see ItemParameterManipulation::doManipulation
-	 * 
+	 *
 	 * @since 0.7.2
-	 */	
-	public function doManipulation( &$value, Parameter $parameter, array &$parameters ) {
-		$parts = $this->metaDataSeparator === false ? array( $value ) : explode( $this->metaDataSeparator, $value ); 
+	 */
+	public function doManipulation( &$value , Parameter $parameter , array &$parameters ) {
+		$parts = $this->metaDataSeparator === false ? array( $value ) : explode( $this->metaDataSeparator , $value );
 
 		$value = array_shift( $parts );
 		$value = new MapsLocation( $value );
 
-		$linkOrTitle = array_shift( $parts );
+		$this->handleCommonParams( $parts , $value );
 
-		if($link = MapsUtils::isLinkParameter($linkOrTitle)){
-			if(MapsUtils::isValidURL($link)){
-				$value->setLink($link);
-			}else{
-				$title = Title::newFromText($link);
-				$value->setLink($title->getFullURL());
-			}
-		}else{
-			if ( $linkOrTitle ) {
-				$value->setTitle( $linkOrTitle );
-			}
-
-			if ( $text = array_shift( $parts ) ) {
-				$value->setText( $text );
-			}
-		}
 		if ( $icon = array_shift( $parts ) ) {
 			$value->setIcon( $icon );
 		}
@@ -81,13 +65,12 @@ class MapsParamLocation extends ItemParameterManipulation {
 			$value->setGroup( $group );
 		}
 
-		if( $inlineLabel = array_shift( $parts ) ){
-			$value->setInlineLabel($inlineLabel);
+		if ( $inlineLabel = array_shift( $parts ) ) {
+			$value->setInlineLabel( $inlineLabel );
 		}
 
 		if ( $this->toJSONObj ) {
 			$value = $value->getJSONObject();
 		}
 	}
-
 }
\ No newline at end of file
diff --git a/includes/manipulations/Maps_ParamPolygon.php b/includes/manipulations/Maps_ParamPolygon.php
index bab719e..cfb5129 100644
--- a/includes/manipulations/Maps_ParamPolygon.php
+++ b/includes/manipulations/Maps_ParamPolygon.php
@@ -13,54 +13,14 @@ class MapsParamPolygon extends MapsParamLine {
 	 *
 	 * @return mixed
 	 */
-	public function doManipulation(&$value, Parameter $parameter, array &$parameters)
-	{
+	public function doManipulation( &$value , Parameter $parameter , array &$parameters ) {
 
-		$parts = explode($this->metaDataSeparator,$value);
-		$polygonCoords = explode(':',array_shift($parts));
+		$parts = explode( $this->metaDataSeparator , $value );
+		$polygonCoords = explode( ':' , array_shift( $parts ) );
 
-		$value = new MapsPolygon($polygonCoords);
-		$linkOrTitle =  array_shift($parts);
-		if($link = MapsUtils::isLinkParameter($linkOrTitle)){
-			if(MapsUtils::isValidURL($link)){
-				$value->setLink($link);
-			}else{
-				$title = Title::newFromText($link);
-				$value->setLink($title->getFullURL());
-			}
-		}else{
-			//create bubble data
-			if($linkOrTitle){
-				$value->setTitle($linkOrTitle);
-			}
-			if($text = array_shift($parts)){
-				$value->setText($text);
-			}
-		}
+		$value = new MapsPolygon( $polygonCoords );
 
-		if($color = array_shift($parts)){
-			$value->setStrokeColor($color);
-		}
-
-		if($opacity = array_shift($parts)){
-			$value->setStrokeOpacity($opacity);
-		}
-
-		if($weight = array_shift($parts)){
-			$value->setStrokeWeight($weight);
-		}
-
-		if($fillColor = array_shift($parts)){
-			$value->setFillColor($fillColor);
-		}
-
-		if($fillOpacity = array_shift($parts)){
-			$value->setFillOpacity($fillOpacity);
-		}
-
-		if($visibleOnHover = array_shift($parts)){
-			$value->setOnlyVisibleOnHover(filter_var($parts[8], FILTER_VALIDATE_BOOLEAN));
-		}
+		$this->handleCommonParams( $parts , $value );
 
 		$value = $value->getJSONObject();
 	}
diff --git a/includes/manipulations/Maps_ParamRectangle.php b/includes/manipulations/Maps_ParamRectangle.php
new file mode 100644
index 0000000..f64fb73
--- /dev/null
+++ b/includes/manipulations/Maps_ParamRectangle.php
@@ -0,0 +1,33 @@
+<?php
+class MapsParamRectangle extends MapsCommonParameterManipulation {
+
+	protected $metaDataSeparator;
+
+	public function __construct( $metaDataSeparator ) {
+		parent::__construct();
+
+		$this->metaDataSeparator = $metaDataSeparator;
+	}
+
+	/**
+	 * Manipulate an actual value.
+	 *
+	 * @param string $value
+	 * @param Parameter $parameter
+	 * @param array $parameters
+	 *
+	 * @since 0.4
+	 *
+	 * @return mixed
+	 */
+	protected function doManipulation( &$value , Parameter $parameter , array &$parameters ) {
+		$parts = explode( $this->metaDataSeparator , $value );
+		$rectData = explode( ':' , array_shift( $parts ) );
+
+		$value = new MapsRectangle( $rectData[0] , $rectData[1] );
+
+		$this->handleCommonParams( $parts , $value );
+
+		$value = $value->getJSONObject();
+	}
+}
\ No newline at end of file
diff --git a/includes/parserHooks/Maps_DisplayLine.php b/includes/parserHooks/Maps_DisplayLine.php
index 0815101..6ff71d2 100644
--- a/includes/parserHooks/Maps_DisplayLine.php
+++ b/includes/parserHooks/Maps_DisplayLine.php
@@ -2,12 +2,12 @@
 
 /**
  * Class for the 'display_line' parser hooks.
- * 
+ *
  * @since 0.7
- * 
+ *
  * @file Maps_DisplayLine.php
  * @ingroup Maps
- * 
+ *
  * @author Kim Eik
  */
 class MapsDisplayLine extends MapsDisplayPoint {
@@ -29,7 +29,7 @@ class MapsDisplayLine extends MapsDisplayPoint {
 	 *
 	 * @return string or array of string
 	 */
-	protected function getName(){
+	protected function getName() {
 		return 'display_line';
 	}
 
@@ -39,12 +39,12 @@ class MapsDisplayLine extends MapsDisplayPoint {
 	 */
 	public function render( array $parameters ) {
 		// Get the instance of the service class.
-		$service = MapsMappingServices::getServiceInstance($parameters['mappingservice']);
+		$service = MapsMappingServices::getServiceInstance( $parameters['mappingservice'] );
 
 		// Get an instance of the class handling the current parser hook and service.
 		$mapClass = $service->getFeatureInstance( $this->getName() );
 
-		return $mapClass->renderMap( $parameters, $this->parser );
+		return $mapClass->renderMap( $parameters , $this->parser );
 	}
 
 	/**
@@ -58,42 +58,50 @@ class MapsDisplayLine extends MapsDisplayPoint {
 	protected function getParameterInfo( $type ) {
 		global $egMapsDefaultServices;
 
-		$params = parent::getParameterInfo($type);
+		$params = parent::getParameterInfo( $type );
 
 		$params['mappingservice']->setDefault( $egMapsDefaultServices[$this->getName()] );
 		$params['mappingservice']->addManipulations( new MapsParamService( $this->getName() ) );
 
-		$params['lines'] = new ListParameter( 'lines', ';' );
-		$params['lines']->setDefault(array());
-		$params['lines']->addCriteria(new CriterionLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-		$params['lines']->addManipulations(new MapsParamLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+		$params['lines'] = new ListParameter( 'lines' , ';' );
+		$params['lines']->setDefault( array() );
+		$params['lines']->addCriteria( new CriterionLine( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
+		$params['lines']->addManipulations( new MapsParamLine( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
 
-		$params['polygons'] = new ListParameter( 'polygons', ';' );
-		$params['polygons']->setDefault(array());
-		$params['polygons']->addCriteria(new CriterionPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-		$params['polygons']->addManipulations(new MapsParamPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+		$params['polygons'] = new ListParameter( 'polygons' , ';' );
+		$params['polygons']->setDefault( array() );
+		$params['polygons']->addCriteria( new CriterionPolygon( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
+		$params['polygons']->addManipulations( new MapsParamPolygon( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
+
+		$params['circles'] = new ListParameter( 'circles' , ';' );
+		$params['circles']->setDefault( array() );
+		$params['circles']->addManipulations( new MapsParamCircle( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
+
+		$params['rectangles'] = new ListParameter( 'rectangles' , ';' );
+		$params['rectangles']->setDefault( array() );
+		$params['rectangles']->addManipulations( new MapsParamRectangle( $type === ParserHook::TYPE_FUNCTION ? '~' : '|' ) );
 
 		$params['copycoords'] = new Parameter(
-			'copycoords',
+			'copycoords' ,
 			Parameter::TYPE_BOOLEAN
 		);
-		$params['copycoords']->setDefault(false);
+		$params['copycoords']->setDefault( false );
 		$params['copycoords']->setDoManipulationOfDefault( false );
 
 
 		$params['markercluster'] = new Parameter(
-			'markercluster',
+			'markercluster' ,
 			Parameter::TYPE_BOOLEAN
 		);
-		$params['markercluster']->setDefault(false);
+		$params['markercluster']->setDefault( false );
 		$params['markercluster']->setDoManipulationOfDefault( false );
 
 		$params['searchmarkers'] = new Parameter(
-			'searchmarkers',
+			'searchmarkers' ,
 			Parameter::TYPE_STRING
 		);
-		$params['searchmarkers']->setDefault('');
-		$params['searchmarkers']->addCriteria(new CriterionSearchMarkers());
+		$params['searchmarkers']->setDefault( '' );
+		$params['searchmarkers']->addCriteria( new CriterionSearchMarkers() );
 		$params['searchmarkers']->setDoManipulationOfDefault( false );
 
 		return $params;
@@ -108,6 +116,6 @@ class MapsDisplayLine extends MapsDisplayPoint {
 	 * @return array
 	 */
 	protected function getDefaultParameters( $type ) {
-		return array( 'coordinates','lines','polygons' );
+		return array( 'coordinates' , 'lines' , 'polygons' );
 	}
 }
\ No newline at end of file
diff --git a/includes/properties/iBubbleMapElement.php b/includes/properties/iBubbleMapElement.php
new file mode 100644
index 0000000..d786069
--- /dev/null
+++ b/includes/properties/iBubbleMapElement.php
@@ -0,0 +1,24 @@
+<?php
+
+interface iBubbleMapElement {
+
+	/**
+	 * @param \text $text
+	 */
+	public function setText( $text );
+
+	/**
+	 * @return \text
+	 */
+	public function getText();
+
+	/**
+	 * @param \title $title
+	 */
+	public function setTitle( $title );
+
+	/**
+	 * @return \title
+	 */
+	public function getTitle();
+}
diff --git a/includes/properties/iFillableMapElement.php b/includes/properties/iFillableMapElement.php
new file mode 100644
index 0000000..569727c
--- /dev/null
+++ b/includes/properties/iFillableMapElement.php
@@ -0,0 +1,24 @@
+<?php
+
+interface iFillableMapElement {
+	/**
+	 * @return
+	 */
+	public function getFillOpacity();
+
+	/**
+	 * @param  $fillOpacity
+	 */
+	public function setFillOpacity( $fillOpacity );
+
+	/**
+	 * @return
+	 */
+	public function getFillColor();
+
+	/**
+	 * @param  $fillColor
+	 */
+	public function setFillColor( $fillColor );
+
+}
\ No newline at end of file
diff --git a/includes/properties/iHoverableMapElement.php b/includes/properties/iHoverableMapElement.php
new file mode 100644
index 0000000..5bcc4d2
--- /dev/null
+++ b/includes/properties/iHoverableMapElement.php
@@ -0,0 +1,13 @@
+<?php
+
+interface iHoverableMapElement {
+	/**
+	 * @param $visible
+	 */
+	public function setOnlyVisibleOnHover( $visible );
+
+	/**
+	 * @return mixed
+	 */
+	public function isOnlyVisibleOnHover();
+}
diff --git a/includes/properties/iLinkableMapElement.php b/includes/properties/iLinkableMapElement.php
new file mode 100644
index 0000000..e2ce1c7
--- /dev/null
+++ b/includes/properties/iLinkableMapElement.php
@@ -0,0 +1,13 @@
+<?php
+
+interface iLinkableMapElement {
+	/**
+	 * @param $link
+	 */
+	public function setLink( $link );
+
+	/**
+	 * @return mixed
+	 */
+	public function getLink();
+}
diff --git a/includes/properties/iStrokableMapElement.php b/includes/properties/iStrokableMapElement.php
new file mode 100644
index 0000000..5cff819
--- /dev/null
+++ b/includes/properties/iStrokableMapElement.php
@@ -0,0 +1,33 @@
+<?php
+
+interface iStrokableMapElement {
+	/**
+	 * @param  $strokeColor
+	 */
+	public function setStrokeColor( $strokeColor );
+
+	/**
+	 * @return
+	 */
+	public function getStrokeColor();
+
+	/**
+	 * @param  $strokeOpacity
+	 */
+	public function setStrokeOpacity( $strokeOpacity );
+
+	/**
+	 * @return
+	 */
+	public function getStrokeOpacity();
+
+	/**
+	 * @param  $strokeWeight
+	 */
+	public function setStrokeWeight( $strokeWeight );
+
+	/**
+	 * @return
+	 */
+	public function getStrokeWeight();
+}
diff --git a/includes/services/GoogleMaps3/jquery.googlemap.js b/includes/services/GoogleMaps3/jquery.googlemap.js
index f75efc6..292f052 100644
--- a/includes/services/GoogleMaps3/jquery.googlemap.js
+++ b/includes/services/GoogleMaps3/jquery.googlemap.js
@@ -31,6 +31,18 @@
 	 */
 	this.polygons = [];
 
+
+	/**
+	 * All circles on the map
+	 */
+	this.circles = [];
+
+
+	/**
+	 * All rectangles on the map
+	 */
+	this.rectangles = [];
+
 	/**
 	 * Creates a new marker with the provided data,
 	 * adds it to the map, and returns it.
@@ -232,6 +244,47 @@
 		});
 	};
 
+	this.addCircle = function(properties){
+		var circle = new google.maps.Circle({
+			map:this.map,
+			center:new google.maps.LatLng(properties.centre.lat,properties.centre.lon),
+			radius: properties.radius,
+			fillColor: properties.fillColor,
+			fillOpacity: properties.fillOpacity,
+			strokeColor: properties.strokeColor,
+			strokeOpacity: properties.strokeOpacity,
+			strokeWeight: properties.strokeWeight
+		});
+		this.circles.push(circle);
+
+		//add click event
+		google.maps.event.addListener(circle,"click", function(event){
+			openBubbleOrLink.call(this, properties, event, circle);
+		});
+	};
+
+
+	this.addRectangle = function(properties){
+		var rectangle = new google.maps.Rectangle({
+			map: this.map,
+			bounds: new google.maps.LatLngBounds(
+				new google.maps.LatLng(properties.sw.lat,properties.sw.lon), //sw
+				new google.maps.LatLng(properties.ne.lat,properties.ne.lon)  //ne
+			),
+			fillColor: properties.fillColor,
+			fillOpacity: properties.fillOpacity,
+			strokeColor: properties.strokeColor,
+			strokeOpacity: properties.strokeOpacity,
+			strokeWeight: properties.strokeWeight
+		})
+		this.rectangles.push(rectangle);
+
+		//add click event
+		google.maps.event.addListener(rectangle,"click", function(event){
+			openBubbleOrLink.call(this, properties, event, rectangle);
+		});
+	}
+
 	this.removePolygon = function(polygon){
 		polygon.setMap( null );
 
@@ -451,6 +504,24 @@
 		}
 
 		/**
+		 * used in display_line to draw circles
+		 */
+		if(options.circles){
+			for ( var i = 0; i < options.circles.length; i++ ) {
+				this.addCircle(options.circles[i]);
+			}
+		}
+
+		/**
+		 * used in display_line to draw rectangles
+		 */
+		if(options.rectangles){
+			for ( var i = 0; i < options.rectangles.length; i++ ) {
+				this.addRectangle(options.rectangles[i]);
+			}
+		}
+
+		/**
 		 * used in display_line functionality
 		 * allows the copy to clipboard of coordinates
 		 */
diff --git a/includes/services/OpenLayers/jquery.openlayers.js b/includes/services/OpenLayers/jquery.openlayers.js
index 2de240e..1825879 100644
--- a/includes/services/OpenLayers/jquery.openlayers.js
+++ b/includes/services/OpenLayers/jquery.openlayers.js
@@ -157,6 +157,58 @@
 		this.polygonLayer.addFeatures([polygonFeature]);
 	}
 
+	this.addCircle = function(properties){
+		var style = {
+			'strokeColor':properties.strokeColor,
+			'strokeWidth': properties.strokeWeight,
+			'strokeOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.strokeOpacity,
+			'fillColor': properties.fillColor,
+			'fillOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.fillOpacity
+		}
+
+		var point = new OpenLayers.Geometry.Point(properties.centre.lon,properties.centre.lat);
+		point.transform(
+			new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+			map.getProjectionObject() // to Spherical Mercator Projection
+		);
+		var circle = OpenLayers.Geometry.Polygon.createRegularPolygon(
+			point,
+			properties.radius,
+			30
+		);
+		var circleFeature = new OpenLayers.Feature.Vector(circle,properties,style);
+		this.circleLayer.addFeatures([circleFeature])
+	}
+
+	this.addRectangle = function(properties){
+		var style = {
+			'strokeColor':properties.strokeColor,
+			'strokeWidth': properties.strokeWeight,
+			'strokeOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.strokeOpacity,
+			'fillColor': properties.fillColor,
+			'fillOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.fillOpacity
+		}
+
+		var point1 = new OpenLayers.Geometry.Point(properties.ne.lon,properties.ne.lat);
+		var point2 = new OpenLayers.Geometry.Point(properties.sw.lon,properties.sw.lat);
+		point1.transform(
+			new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+			map.getProjectionObject() // to Spherical Mercator Projection
+		);
+		point2.transform(
+			new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+			map.getProjectionObject() // to Spherical Mercator Projection
+		);
+
+		var bounds = new OpenLayers.Bounds();
+		bounds.extend(point1);
+		bounds.extend(point2);
+
+		var rectangle = bounds.toGeometry();
+		var rectangleFeature = new OpenLayers.Feature.Vector(rectangle,properties,style);
+		this.rectangleLayer.addFeatures([rectangleFeature])
+	}
+
 	/**
 	 * Gets a valid control name (with excat lower and upper case letters),
 	 * or returns false when the control is not allowed.
@@ -311,6 +363,67 @@
 		}
 	}
 
+	if(options.circles && options.circles.length > 0){
+		this.circleLayer = new OpenLayers.Layer.Vector("Circle Layer");
+
+		var controls = {
+			select: new OpenLayers.Control.SelectFeature(this.circleLayer,{
+				clickout: true, toggle: false,
+				multiple: true, hover: true,
+				callbacks: {
+					'click':function(feature){
+						openBubbleOrLink(feature.attributes);
+					}
+				}
+			})
+		};
+
+		for(key in controls){
+			var control = controls[key];
+			map.addControl(control);
+			control.activate();
+		}
+
+		map.addLayer(this.circleLayer);
+		map.raiseLayer(this.circleLayer,-1);
+		map.resetLayersZIndex();
+
+		for ( var i = 0; i < options.circles.length; i++ ) {
+			this.addCircle(options.circles[i]);
+		}
+	}
+
+
+	if(options.rectangles && options.rectangles.length > 0){
+		this.rectangleLayer = new OpenLayers.Layer.Vector("Rectangle Layer");
+
+		var controls = {
+			select: new OpenLayers.Control.SelectFeature(this.rectangleLayer,{
+				clickout: true, toggle: false,
+				multiple: true, hover: true,
+				callbacks: {
+					'click':function(feature){
+						openBubbleOrLink(feature.attributes);
+					}
+				}
+			})
+		};
+
+		for(key in controls){
+			var control = controls[key];
+			map.addControl(control);
+			control.activate();
+		}
+
+		map.addLayer(this.rectangleLayer);
+		map.raiseLayer(this.rectangleLayer,-1);
+		map.resetLayersZIndex();
+
+		for ( var i = 0; i < options.rectangles.length; i++ ) {
+			this.addRectangle(options.rectangles[i]);
+		}
+	}
+
 	if ( options.zoom !== false ) {
 		map.zoomTo( options.zoom );
 	}
-- 
1.7.9.5

