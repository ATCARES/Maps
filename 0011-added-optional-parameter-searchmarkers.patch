From 6a1e304a6e4005000b3e49ba86660012fe5333fe Mon Sep 17 00:00:00 2001
From: Kim Eik <kim@heldig.org>
Date: Wed, 2 May 2012 12:44:26 +0200
Subject: [PATCH 11/32] added optional parameter "searchmarkers"

The searchmarkers parameter will add a text field which will filter
markers based on their title/text contents which would be present
in an info bubble if specified.

searchmarkers can be set to "all" or "title", where if set to title,
will only filter on the title field. but if set to all, will filter on
title and text.

Change-Id: Ib6de72e887054c642442c50b787c3dc5992b944e
---
 Maps.i18n.php                                     |   14 +-
 Maps.php                                          |   45 +-
 includes/criteria/CriterionSearchMarkers.php      |   43 ++
 includes/parserHooks/Maps_DisplayLine.php         |  188 ++++----
 includes/services/GoogleMaps3/GoogleMaps3.php     |   13 +-
 includes/services/GoogleMaps3/jquery.googlemap.js |  501 +++++++++++----------
 includes/services/OpenLayers/jquery.openlayers.js |   27 +-
 7 files changed, 465 insertions(+), 366 deletions(-)
 create mode 100644 includes/criteria/CriterionSearchMarkers.php

diff --git a/Maps.i18n.php b/Maps.i18n.php
index 9252738..721f21f 100644
--- a/Maps.i18n.php
+++ b/Maps.i18n.php
@@ -16,14 +16,15 @@ $messages = array();
 $messages['en'] = array(
 	// General
 	'maps-desc' => "Enables embedding of dynamic maps into wiki pages, geocoding of addresses and other geographical operations. ([http://mapping.referata.com/wiki/Examples demos])",
-	
+
 	'right-geocode' => 'Geocode',
-	
+
 	'maps_map' => 'Map',
 	'maps-loading-map' => 'Loading map...',
 	'maps-load-failed' => 'Could not load the map!',
 	'maps-markers' => 'Markers',
 	'maps-copycoords-prompt' => 'CTRL+C, ENTER',
+	'maps-searchmarkers-text' => 'Filter markers',
 	'maps-clustering-unsupportedservice' => 'This service doesn\'t support clustering of markers',
 	'maps-others' => 'others',
 	//TODO: move to namespaces i18n
@@ -53,7 +54,7 @@ $messages['en'] = array(
 	// Mapsdoc parser hook
 	'maps-mapsdoc-par-service' => 'The mapping service to display parameter documentation for.',
 	'maps-mapsdoc-par-language' => 'The language in which to display the documentation. If no such translation is available, English will be used instead.',
-	
+
 	// Coordinates parser hook
 	'maps-coordinates-par-location' => 'The coordinates you want to format.',
 	'maps-coordinates-par-format' => 'The target format for the coordinates.',
@@ -126,8 +127,9 @@ When used together with label, the title will be bold and underlined.',
 
 	'validation-error-invalid-goverlay' => 'Parameter $1 must be a valid overlay.',
 	'validation-error-invalid-goverlays' => 'Parameter $1 must be one or more valid overlays.',
-    	'validation-error-invalid-line-param' => 'Invalid "lines" parameter specified.',
-    	'validation-error-invalid-polyline-param' => 'Invalid "polylines" parameter specified.',
+	'validation-error-invalid-line-param' => 'Invalid "lines" parameter specified.',
+	'validation-error-invalid-polyline-param' => 'Invalid "polylines" parameter specified.',
+	'validation-error-invalid-searchmarkers-param' => 'Invalid searchmarkers value, should be either "all" or "title"',
 
 	// Coordinate handling
 	'maps-abb-north' => 'N',
@@ -167,7 +169,7 @@ $1',
 	'maps-par-zoom' => 'The zoom level for the map. For maps with markers this will default to the most zoomed in level that still shows all markers.',
 	'maps-par-width' => 'Allows setting the width of the map. By default pixels will be assumed as unit, but you can explicitly specify one of these units: px, ex, em, %.',
 	'maps-par-height' => 'Allows setting the height of the map. By default pixels will be assumed as unit, but you can explicitly specify one of these units: px, ex, em, %.',
-    
+
 	// Google Maps v2
 	'maps-googlemaps2-incompatbrowser' => 'Your browser is not compatible with Google Maps v2.',
 	'maps_overlays' => 'Overlays',
diff --git a/Maps.php b/Maps.php
index c661d05..4558911 100644
--- a/Maps.php
+++ b/Maps.php
@@ -2,7 +2,7 @@
 
 /**
  * Initialization file for the Maps extension.
- * 
+ *
  * On MediaWiki.org: 		http://www.mediawiki.org/wiki/Extension:Maps
  * Official documentation: 	http://mapping.referata.com/wiki/Maps
  * Examples/demo's: 		http://mapping.referata.com/wiki/Maps_examples
@@ -97,6 +97,7 @@ $wgAutoloadClasses['CriterionMapDimension'] 	= $criDir . 'CriterionMapDimension.
 $wgAutoloadClasses['CriterionMapLayer'] 		= $criDir . 'CriterionMapLayer.php';
 $wgAutoloadClasses['CriterionLine'] 	    	= $criDir . 'CriterionLine.php';
 $wgAutoloadClasses['CriterionPolygon'] 	    	= $criDir . 'CriterionPolygon.php';
+$wgAutoloadClasses['CriterionSearchMarkers'] 	= $criDir . 'CriterionSearchMarkers.php';
 unset( $criDir );
 
 // Autoload the "includes/features/" classes.
@@ -159,9 +160,9 @@ $wgHooks['AdminLinks'][] = 'MapsHooks::addToAdminLinks';
 
 // Since 0.6.5
 $wgHooks['UnitTestsList'][] = 'MapsHooks::registerUnitTests';
-	
+
 // Since 0.7.1
-$wgHooks['ArticleFromTitle'][] = 'MapsHooks::onArticleFromTitle';	
+$wgHooks['ArticleFromTitle'][] = 'MapsHooks::onArticleFromTitle';
 
 // Since 1.0
 $wgHooks['MakeGlobalVariablesScript'][] = 'MapsHooks::onMakeGlobalVariablesScript';
@@ -183,8 +184,8 @@ $egMapsFeatures['pf'][]	= 'MapsDisplayLine::initialize';
 	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayMap::staticInit';
 	# Required for #display_point.
 	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayPoint::staticInit';
-    # Required for #display_line.
-    $wgHooks['ParserFirstCallInit'][] = 'MapsDisplayLine::staticInit';
+	# Required for #display_line.
+	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayLine::staticInit';
 	# Required for #distance.
 	$wgHooks['ParserFirstCallInit'][] = 'MapsDistance::staticInit';
 	# Required for #finddestination.
@@ -195,45 +196,45 @@ $egMapsFeatures['pf'][]	= 'MapsDisplayLine::initialize';
 	$wgHooks['ParserFirstCallInit'][] = 'MapsGeodistance::staticInit';
 	# Required for #mapsdoc.
 	$wgHooks['ParserFirstCallInit'][] = 'MapsMapsDoc::staticInit';
-	
+
 # Geocoders
-	
+
 	# Registration of the GeoNames service geocoder.
-	$wgHooks['GeocoderFirstCallInit'][] = 'MapsGeonamesGeocoder::register';	
+	$wgHooks['GeocoderFirstCallInit'][] = 'MapsGeonamesGeocoder::register';
 
 	# Registration of the Google Geocoding (v2) service geocoder.
 	$wgHooks['GeocoderFirstCallInit'][] = 'MapsGoogleGeocoder::register';
-	
+
 	# Registration of the Yahoo! Geocoding service geocoder.
 	$wgHooks['GeocoderFirstCallInit'][] = 'MapsYahooGeocoder::register';
-	
+
 # Layers
 
 	# Registration of the image layer type.
 	$wgHooks['MappingLayersInitialization'][] = 'MapsImageLayer::register';
-	
+
 	# Registration of the KML layer type.
 	$wgHooks['MappingLayersInitialization'][] = 'MapsKMLLayer::register';
 
 # Mapping services
-	
+
 	# Include the mapping services that should be loaded into Maps.
 	# Commenting or removing a mapping service will make Maps completely ignore it, and so improve performance.
-	
+
 	# Google Maps API v3
 	include_once $egMapsDir . 'includes/services/GoogleMaps3/GoogleMaps3.php';
-	
+
 	# OpenLayers API
 	include_once $egMapsDir . 'includes/services/OpenLayers/OpenLayers.php';
-	
+
 	# Yahoo! Maps API
 	include_once $egMapsDir . 'includes/services/YahooMaps/YahooMaps.php';
-	
+
 	# WMF OSM
-	include_once $egMapsDir . 'includes/services/OSM/OSM.php';		
+	include_once $egMapsDir . 'includes/services/OSM/OSM.php';
 
 $egMapsSettings = array();
-	
+
 // Include the settings file.
 require_once $egMapsDir . 'Maps_Settings.php';
 
@@ -242,7 +243,7 @@ define( 'Maps_NS_LAYER_TALK', 	$egMapsNamespaceIndex + 1 );
 
 $wgResourceModules['ext.maps.common'] = array(
 	'localBasePath' => dirname( __FILE__ ) . '/includes',
-	'remoteBasePath' => $egMapsScriptPath . '/includes',	
+	'remoteBasePath' => $egMapsScriptPath . '/includes',
 	'group' => 'ext.maps',
 	'messages' => array(
 		'maps-load-failed',
@@ -254,7 +255,7 @@ $wgResourceModules['ext.maps.common'] = array(
 
 $wgResourceModules['ext.maps.coord'] = array(
 	'localBasePath' => dirname( __FILE__ ) . '/includes',
-	'remoteBasePath' => $egMapsScriptPath . '/includes',	
+	'remoteBasePath' => $egMapsScriptPath . '/includes',
 	'group' => 'ext.maps',
 	'messages' => array(
 		'maps-abb-north',
@@ -284,9 +285,9 @@ $egMapsGlobalJSVars = array();
 
 /**
  * Initialization function for the Maps extension.
- * 
+ *
  * @since 0.1
- * 
+ *
  * @return true
  */
 function efMapsSetup() {
diff --git a/includes/criteria/CriterionSearchMarkers.php b/includes/criteria/CriterionSearchMarkers.php
new file mode 100644
index 0000000..a59da27
--- /dev/null
+++ b/includes/criteria/CriterionSearchMarkers.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * Parameter criterion stating that the value must be either 'title' or 'all'
+ *
+ * @since 0.7
+ *
+ * @file CriterionLine.php
+ * @ingroup Maps
+ * @ingroup Criteria
+ *
+ * @author Kim Eik
+ */
+class CriterionSearchMarkers extends ItemParameterCriterion
+{
+	/**
+	 * Returns true if $value is either title or all
+	 * @param string $value
+	 * @param Parameter $parameter
+	 * @param array $parameters
+	 * @return bool
+	 */
+	protected function doValidation($value, Parameter $parameter, array $parameters)
+	{
+		$value = strtolower($value);
+		return $value == 'title' || $value == 'all';
+	}
+
+	/**
+	 * Gets an internationalized error message to construct a ValidationError with
+	 * when the criteria validation failed. (for non-list values)
+	 *
+	 * @param Parameter $parameter
+	 *
+	 * @since 0.4
+	 *
+	 * @return string
+	 */
+	protected function getItemErrorMessage(Parameter $parameter)
+	{
+		return wfMsgExt('validation-error-invalid-searchmarkers-param', 'parsemag', $parameter->getOriginalName());
+	}
+}
diff --git a/includes/parserHooks/Maps_DisplayLine.php b/includes/parserHooks/Maps_DisplayLine.php
index 73dd82d..0815101 100644
--- a/includes/parserHooks/Maps_DisplayLine.php
+++ b/includes/parserHooks/Maps_DisplayLine.php
@@ -12,94 +12,102 @@
  */
 class MapsDisplayLine extends MapsDisplayPoint {
 
-    /**
-     * No LSB in pre-5.3 PHP *sigh*.
-     * This is to be refactored as soon as php >=5.3 becomes acceptable.
-     */
-    public static function staticInit( Parser &$parser ) {
-        $instance = new self;
-        return $instance->init( $parser );
-    }
-
-
-    /**
-     * Gets the name of the parser hook.
-     *
-     * @since 0.4
-     *
-     * @return string or array of string
-     */
-    protected function getName(){
-        return 'display_line';
-    }
-
-    /**
-     * @param array $parameters
-     * @return mixed
-     */
-    public function render( array $parameters ) {
-        // Get the instance of the service class.
-        $service = MapsMappingServices::getServiceInstance($parameters['mappingservice']);
-
-        // Get an instance of the class handling the current parser hook and service.
-        $mapClass = $service->getFeatureInstance( $this->getName() );
-
-        return $mapClass->renderMap( $parameters, $this->parser );
-    }
-
-    /**
-     * Returns an array containing the parameter info.
-     * @see ParserHook::getParameterInfo
-     *
-     * @since 0.7
-     *
-     * @return array
-     */
-    protected function getParameterInfo( $type ) {
-        global $egMapsDefaultServices;
-
-        $params = parent::getParameterInfo($type);
-
-        $params['mappingservice']->setDefault( $egMapsDefaultServices[$this->getName()] );
-        $params['mappingservice']->addManipulations( new MapsParamService( $this->getName() ) );
-
-        $params['lines'] = new ListParameter( 'lines', ';' );
-        $params['lines']->setDefault(array());
-        $params['lines']->addCriteria(new CriterionLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-        $params['lines']->addManipulations(new MapsParamLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-
-        $params['polygons'] = new ListParameter( 'polygons', ';' );
-        $params['polygons']->setDefault(array());
-        $params['polygons']->addCriteria(new CriterionPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-        $params['polygons']->addManipulations(new MapsParamPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
-
-        $params['copycoords'] = new Parameter(
-            'copycoords',
-            Parameter::TYPE_BOOLEAN
-        );
-        $params['copycoords']->setDefault(false);
-        $params['copycoords']->setDoManipulationOfDefault( false );
-
-
-        $params['markercluster'] = new Parameter(
-            'markercluster',
-            Parameter::TYPE_BOOLEAN
-        );
-        $params['markercluster']->setDefault(false);
-        $params['markercluster']->setDoManipulationOfDefault( false );
-
-        return $params;
-    }
-
-    /**
-     * Returns the list of default parameters.
-     * @see ParserHook::getDefaultParameters
-     *
-     * @since 0.7
-     *
-     * @return array
-     */
-    protected function getDefaultParameters( $type ) {
-        return array( 'coordinates','lines','polygons' );
-    }
+	/**
+	 * No LSB in pre-5.3 PHP *sigh*.
+	 * This is to be refactored as soon as php >=5.3 becomes acceptable.
+	 */
+	public static function staticInit( Parser &$parser ) {
+		$instance = new self;
+		return $instance->init( $parser );
+	}
+
+
+	/**
+	 * Gets the name of the parser hook.
+	 *
+	 * @since 0.4
+	 *
+	 * @return string or array of string
+	 */
+	protected function getName(){
+		return 'display_line';
+	}
+
+	/**
+	 * @param array $parameters
+	 * @return mixed
+	 */
+	public function render( array $parameters ) {
+		// Get the instance of the service class.
+		$service = MapsMappingServices::getServiceInstance($parameters['mappingservice']);
+
+		// Get an instance of the class handling the current parser hook and service.
+		$mapClass = $service->getFeatureInstance( $this->getName() );
+
+		return $mapClass->renderMap( $parameters, $this->parser );
+	}
+
+	/**
+	 * Returns an array containing the parameter info.
+	 * @see ParserHook::getParameterInfo
+	 *
+	 * @since 0.7
+	 *
+	 * @return array
+	 */
+	protected function getParameterInfo( $type ) {
+		global $egMapsDefaultServices;
+
+		$params = parent::getParameterInfo($type);
+
+		$params['mappingservice']->setDefault( $egMapsDefaultServices[$this->getName()] );
+		$params['mappingservice']->addManipulations( new MapsParamService( $this->getName() ) );
+
+		$params['lines'] = new ListParameter( 'lines', ';' );
+		$params['lines']->setDefault(array());
+		$params['lines']->addCriteria(new CriterionLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+		$params['lines']->addManipulations(new MapsParamLine($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+
+		$params['polygons'] = new ListParameter( 'polygons', ';' );
+		$params['polygons']->setDefault(array());
+		$params['polygons']->addCriteria(new CriterionPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+		$params['polygons']->addManipulations(new MapsParamPolygon($type === ParserHook::TYPE_FUNCTION ? '~' : '|' ));
+
+		$params['copycoords'] = new Parameter(
+			'copycoords',
+			Parameter::TYPE_BOOLEAN
+		);
+		$params['copycoords']->setDefault(false);
+		$params['copycoords']->setDoManipulationOfDefault( false );
+
+
+		$params['markercluster'] = new Parameter(
+			'markercluster',
+			Parameter::TYPE_BOOLEAN
+		);
+		$params['markercluster']->setDefault(false);
+		$params['markercluster']->setDoManipulationOfDefault( false );
+
+		$params['searchmarkers'] = new Parameter(
+			'searchmarkers',
+			Parameter::TYPE_STRING
+		);
+		$params['searchmarkers']->setDefault('');
+		$params['searchmarkers']->addCriteria(new CriterionSearchMarkers());
+		$params['searchmarkers']->setDoManipulationOfDefault( false );
+
+		return $params;
+	}
+
+	/**
+	 * Returns the list of default parameters.
+	 * @see ParserHook::getDefaultParameters
+	 *
+	 * @since 0.7
+	 *
+	 * @return array
+	 */
+	protected function getDefaultParameters( $type ) {
+		return array( 'coordinates','lines','polygons' );
+	}
 }
\ No newline at end of file
diff --git a/includes/services/GoogleMaps3/GoogleMaps3.php b/includes/services/GoogleMaps3/GoogleMaps3.php
index 7f45b4a..feeda06 100644
--- a/includes/services/GoogleMaps3/GoogleMaps3.php
+++ b/includes/services/GoogleMaps3/GoogleMaps3.php
@@ -27,13 +27,14 @@ $wgResourceModules['ext.maps.googlemaps3'] = array(
 	'remoteBasePath' => $egMapsScriptPath .  '/includes/services/GoogleMaps3',	
 	'group' => 'ext.maps',
 	'scripts' => array(
-        'markerclusterer.js',
+		'markerclusterer.js',
 		'jquery.googlemap.js',
 		'ext.maps.googlemaps3.js'
 	),
 	'messages' => array(
 		'maps-googlemaps3-incompatbrowser',
-        'maps-copycoords-prompt'
+		'maps-copycoords-prompt',
+		'maps-searchmarkers-text'
 	)
 );
 
@@ -68,7 +69,7 @@ $wgHooks['MappingServiceLoad'][] = 'efMapsInitGoogleMaps3';
  */
 function efMapsInitGoogleMaps3() {
 	global $wgAutoloadClasses;
-	
+
 	$wgAutoloadClasses['MapsGoogleMaps3'] 			= dirname( __FILE__ ) . '/Maps_GoogleMaps3.php';
 	$wgAutoloadClasses['MapsParamGMap3Type']		= dirname( __FILE__ ) . '/Maps_ParamGMap3Type.php';
 	$wgAutoloadClasses['MapsParamGMap3Types']		= dirname( __FILE__ ) . '/Maps_ParamGMap3Types.php';
@@ -78,8 +79,8 @@ function efMapsInitGoogleMaps3() {
 	MapsMappingServices::registerService( 'googlemaps3', 'MapsGoogleMaps3' );
 	$googleMaps = MapsMappingServices::getServiceInstance( 'googlemaps3' );	
 	$googleMaps->addFeature( 'display_map', 'MapsBaseMap' );
-    $googleMaps->addFeature( 'display_point', 'MapsBasePointMap' );
-    $googleMaps->addFeature( 'display_line', 'MapsBasePointLineMap' );
-	
+	$googleMaps->addFeature( 'display_point', 'MapsBasePointMap' );
+	$googleMaps->addFeature( 'display_line', 'MapsBasePointLineMap' );
+
 	return true;
 }
diff --git a/includes/services/GoogleMaps3/jquery.googlemap.js b/includes/services/GoogleMaps3/jquery.googlemap.js
index d660352..833b85f 100644
--- a/includes/services/GoogleMaps3/jquery.googlemap.js
+++ b/includes/services/GoogleMaps3/jquery.googlemap.js
@@ -8,29 +8,29 @@
 (function( $, mw ){ $.fn.googlemaps = function( options ) {
 
 	var _this = this;
-	
+
 	this.map = null;
-    this.markercluster = null;
+	this.markercluster = null;
 	this.options = options;
-	
+
 	/**
 	 * All markers that are currently on the map.
 	 * @type {Array}
 	 * @private
 	 */
 	this.markers = [];
-	
+
 	/**
-     * All Polylines currently on the map,
-     * @type {Array}
-     * @private
-     */
-    this.lines = [];
+	 * All Polylines currently on the map,
+	 * @type {Array}
+	 * @private
+	 */
+	this.lines = [];
 
-    /**
-     * All polygons currently on the map,
-     */
-    this.polygons = [];
+	/**
+	 * All polygons currently on the map,
+	 */
+	this.polygons = [];
 
 	/**
 	 * Creates a new marker with the provided data,
@@ -43,15 +43,15 @@
 			position: new google.maps.LatLng( markerData.lat , markerData.lon ),
 			title: markerData.title
 		};
-		
+
 		if ( markerData.icon !== '' ) {
 			markerOptions.icon = markerData.icon; 
 		}
-		
+
 		var marker = new google.maps.Marker( markerOptions );
-		
+
 		marker.openWindow = false;
-		
+
 		if ( markerData.text !== '' ) {
 			marker.text = markerData.text;
 			google.maps.event.addListener( marker, 'click', function() {
@@ -65,30 +65,30 @@
 				this.openWindow.open( _this.map, this );					
 			} );		
 		}
-		
+
 		marker.setMap( this.map );
 		this.markers.push( marker );
-		
+
 		return marker;
 	};
-	
+
 	/**
 	 * Removes a single marker from the map.
 	 * @param {google.maps.Marker} marker The marker to remove.
 	 */
 	this.removeMarker = function( marker ) {
 		marker.setMap( null );
-		
+
 		for ( var i = this.markers.length - 1; i >= 0; i-- ) {
 			if ( this.markers[i] === marker ) {
 				delete this.markers[i];
 				break;
 			}
 		}
-		
+
 		delete marker;
 	};
-	
+
 	/**
 	 * Removes all markers from the map.
 	 */		
@@ -98,7 +98,7 @@
 		}
 		this.markers = [];
 	};
-	
+
 	/**
 	 * Remove the "earth" type from options.types if it's present.
 	 * 
@@ -111,17 +111,17 @@
 		else {
 			// Seems someone is using the o-so-awesome browser that is IE.
 			var types = [];
-			
+
 			for ( i in options.types ) {
 				if ( typeof( options.types[i] ) !== 'function' && options.types[i] !== 'earth' ) {
 					types.push( options.types[i] );
 				}
 			}
-			
+
 			options.types = types;
 		}
 	};
-	
+
 	this.addOverlays = function() {
 		// Add the Google KML/KMZ layers.
 		for ( i = options.gkml.length - 1; i >= 0; i-- ) {
@@ -133,156 +133,156 @@
 				}
 			);
 		}
-		
+
 		// If there are any non-Google KML/KMZ layers, load the geoxml library and use it to add these layers.
 		if ( options.kml.length != 0 ) {
 			mw.loader.using( 'ext.maps.gm3.geoxml', function() {
-                var geoXml = new geoXML3.parser( { map: _this.map, zoom: options.kmlrezoom } );
-                geoXml.parse( options.kml );
+				var geoXml = new geoXML3.parser( { map: _this.map, zoom: options.kmlrezoom } );
+				geoXml.parse( options.kml );
 			} );		
 		}		
 	};
-	
-    this.addLine = function(properties){
-        var paths = new google.maps.MVCArray();
-        for(var x = 0; x < properties.pos.length; x++){
-            paths.push(new google.maps.LatLng( properties.pos[x].lat , properties.pos[x].lon ));
-        }
-
-        var line = new google.maps.Polyline({
-                map:this.map,
-                path:paths,
-                strokeColor:properties.strokeColor,
-                strokeOpacity:properties.strokeOpacity,
-                strokeWeight:properties.strokeWeight
-        });
-        this.lines.push(line);
-
-        google.maps.event.addListener(line,"click", function(event){
-            if (this.openWindow != undefined) {
-                this.openWindow.close();
-            }
-            this.openWindow = new google.maps.InfoWindow();
-            this.openWindow.content = properties.text;
-            this.openWindow.position = event.latLng;
-            this.openWindow.closeclick = function() {
-                line.openWindow = undefined;
-            };
-            this.openWindow.open(_this.map);
-        });
-    };
-
-    this.removeLine = function(line){
-        line.setMap( null );
-
-        for ( var i = this.line.length - 1; i >= 0; i-- ) {
-            if ( this.line[i] === line ) {
-                delete this.line[i];
-                break;
-            }
-        }
-
-        delete line;
-    };
-
-    this.removeLines = function(){
-        for ( var i = this.lines.length - 1; i >= 0; i-- ) {
-            this.lines[i].setMap( null );
-        }
-        this.lines = [];
-    };
-
-    this.addPolygon = function(properties){
-        var paths = new google.maps.MVCArray();
-        for(var x = 0; x < properties.pos.length; x++){
-            paths.push(new google.maps.LatLng( properties.pos[x].lat , properties.pos[x].lon ));
-        }
-
-        var polygon = new google.maps.Polygon({
-            map:this.map,
-            path:paths,
-            strokeColor:properties.strokeColor,
-            strokeOpacity:properties.strokeOpacity,
-            strokeWeight:properties.strokeWeight,
-            fillColor:properties.fillColor,
-            fillOpacity: properties.fillOpacity
-        });
-        this.polygons.push(polygon);
-
-        //add hover event/effect
-        if(properties.onlyVisibleOnHover === true){
-
-            function hidePolygon(polygon) {
-                polygon.setOptions({
-                    fillOpacity:0,
-                    strokeOpacity:0
-                });
-            }
-
-            hidePolygon(polygon);
-
-            google.maps.event.addListener(polygon,"mouseover",function(){
-                this.setOptions({
-                    fillOpacity: properties.fillOpacity,
-                    strokeOpacity:properties.strokeOpacity
-                });
-            });
-
-            google.maps.event.addListener(polygon,"mouseout",function(){
-                hidePolygon(this);
-            });
-
-        }
-
-        //add click event
-        google.maps.event.addListener(polygon,"click", function(event){
-            if (this.openWindow != undefined) {
-                this.openWindow.close();
-            }
-            this.openWindow = new google.maps.InfoWindow();
-            this.openWindow.content = properties.text;
-            this.openWindow.position = event.latLng;
-            this.openWindow.closeclick = function() {
-                polygon.openWindow = undefined;
-            };
-            this.openWindow.open(_this.map);
-        });
-    };
-
-    this.removePolygon = function(polygon){
-        polygon.setMap( null );
-
-        for ( var i = this.polygon.length - 1; i >= 0; i-- ) {
-            if ( this.polygon[i] === polygon ) {
-                delete this.polygon[i];
-                break;
-            }
-        }
-
-        delete polygon;
-    };
-
-    this.removePolygons = function(){
-        for ( var i = this.polygon.length - 1; i >= 0; i-- ) {
-            this.polygon[i].setMap( null );
-        }
-        this.polygon = [];
-    };
+
+	this.addLine = function(properties){
+		var paths = new google.maps.MVCArray();
+		for(var x = 0; x < properties.pos.length; x++){
+			paths.push(new google.maps.LatLng( properties.pos[x].lat , properties.pos[x].lon ));
+		}
+
+		var line = new google.maps.Polyline({
+				map:this.map,
+				path:paths,
+				strokeColor:properties.strokeColor,
+				strokeOpacity:properties.strokeOpacity,
+				strokeWeight:properties.strokeWeight
+		});
+		this.lines.push(line);
+
+		google.maps.event.addListener(line,"click", function(event){
+			if (this.openWindow != undefined) {
+				this.openWindow.close();
+			}
+			this.openWindow = new google.maps.InfoWindow();
+			this.openWindow.content = properties.text;
+			this.openWindow.position = event.latLng;
+			this.openWindow.closeclick = function() {
+				line.openWindow = undefined;
+			};
+			this.openWindow.open(_this.map);
+		});
+	};
+
+	this.removeLine = function(line){
+		line.setMap( null );
+
+		for ( var i = this.line.length - 1; i >= 0; i-- ) {
+			if ( this.line[i] === line ) {
+				delete this.line[i];
+				break;
+			}
+		}
+
+		delete line;
+	};
+
+	this.removeLines = function(){
+		for ( var i = this.lines.length - 1; i >= 0; i-- ) {
+			this.lines[i].setMap( null );
+		}
+		this.lines = [];
+	};
+
+	this.addPolygon = function(properties){
+		var paths = new google.maps.MVCArray();
+		for(var x = 0; x < properties.pos.length; x++){
+			paths.push(new google.maps.LatLng( properties.pos[x].lat , properties.pos[x].lon ));
+		}
+
+		var polygon = new google.maps.Polygon({
+			map:this.map,
+			path:paths,
+			strokeColor:properties.strokeColor,
+			strokeOpacity:properties.strokeOpacity,
+			strokeWeight:properties.strokeWeight,
+			fillColor:properties.fillColor,
+			fillOpacity: properties.fillOpacity
+		});
+		this.polygons.push(polygon);
+
+		//add hover event/effect
+		if(properties.onlyVisibleOnHover === true){
+
+			function hidePolygon(polygon) {
+				polygon.setOptions({
+					fillOpacity:0,
+					strokeOpacity:0
+				});
+			}
+
+			hidePolygon(polygon);
+
+			google.maps.event.addListener(polygon,"mouseover",function(){
+				this.setOptions({
+					fillOpacity: properties.fillOpacity,
+					strokeOpacity:properties.strokeOpacity
+				});
+			});
+
+			google.maps.event.addListener(polygon,"mouseout",function(){
+				hidePolygon(this);
+			});
+
+		}
+
+		//add click event
+		google.maps.event.addListener(polygon,"click", function(event){
+			if (this.openWindow != undefined) {
+				this.openWindow.close();
+			}
+			this.openWindow = new google.maps.InfoWindow();
+			this.openWindow.content = properties.text;
+			this.openWindow.position = event.latLng;
+			this.openWindow.closeclick = function() {
+				polygon.openWindow = undefined;
+			};
+			this.openWindow.open(_this.map);
+		});
+	};
+
+	this.removePolygon = function(polygon){
+		polygon.setMap( null );
+
+		for ( var i = this.polygon.length - 1; i >= 0; i-- ) {
+			if ( this.polygon[i] === polygon ) {
+				delete this.polygon[i];
+				break;
+			}
+		}
+
+		delete polygon;
+	};
+
+	this.removePolygons = function(){
+		for ( var i = this.polygon.length - 1; i >= 0; i-- ) {
+			this.polygon[i].setMap( null );
+		}
+		this.polygon = [];
+	};
 
 	this.setup = function() {
 		var showEarth = $.inArray( 'earth', options.types ) !== -1; 
-		
+
 		// If there are any non-Google KML/KMZ layers, load the geoxml library and use it to add these layers.
 		if ( showEarth ) {
 			this.removeEarthType();
 			showEarth = mw.config.get( 'egGoogleJsApiKey' ) !== '';
 		}
-		
+
 		var mapOptions = {
 			disableDefaultUI: true,
 			mapTypeId: options.type == 'earth' ? google.maps.MapTypeId.SATELLITE : eval( 'google.maps.MapTypeId.' + options.type )
 		};
-		
+
 		// Map controls
 		mapOptions.panControl = $.inArray( 'pan', options.controls ) != -1;
 		mapOptions.zoomControl = $.inArray( 'zoom', options.controls ) != -1;
@@ -295,7 +295,7 @@
 				options.types[i] = eval( 'google.maps.MapTypeId.' + options.types[i] );
 			}
 		}
-		
+
 		// Map control styles
 		mapOptions.zoomControlOptions = { style: eval( 'google.maps.ZoomControlStyle.' + options.zoomstyle ) };
 		mapOptions.mapTypeControlOptions = {
@@ -316,32 +316,32 @@
 				}
 			] } );
 		}
-		
+
 		if ( !options.locations ) {
 			options.locations = [];
 		}
-		
+
 		// Add the markers.
 		for ( var i = options.locations.length - 1; i >= 0; i-- ) {
 			this.addMarker( options.locations[i] );
 		}
-		
+
 		for ( i = options.fusiontables.length - 1; i >= 0; i-- ) {
 			var ftLayer = new google.maps.FusionTablesLayer( options.fusiontables[i], { map: map } );
 		}
-		
+
 		var layerMapping = {
 			'traffic': 'new google.maps.TrafficLayer()',
 			'bicycling': 'new google.maps.BicyclingLayer()'
 		};
-		
+
 		for ( i = options.layers.length - 1; i >= 0; i-- ) {
 			var layer = eval( layerMapping[options.layers[i]] );
 			layer.setMap( map );
 		}	
-		
+
 		var bounds;
-		
+
 		if ( ( options.centre === false || options.zoom === false ) && options.locations.length > 1 ) {
 			bounds = new google.maps.LatLngBounds();
 
@@ -349,16 +349,16 @@
 				bounds.extend( this.markers[i].getPosition() );
 			}
 		}
-		
+
 		if ( options.zoom === false ) {
 			map.fitBounds( bounds );
 		}
 		else {
 			map.setZoom( options.zoom );
 		}
-		
+
 		var centre;
-		
+
 		if ( options.centre === false ) {
 			if ( options.locations.length > 1 ) {
 				centre = bounds.getCenter();
@@ -373,9 +373,9 @@
 		else {
 			centre = new google.maps.LatLng( options.centre.lat, options.centre.lon );
 		}
-		
+
 		map.setCenter( centre );
-		
+
 		if ( showEarth ) {
 			$.getScript(
 				'https://www.google.com/jsapi?key=' + mw.config.get( 'egGoogleJsApiKey' ),
@@ -385,9 +385,9 @@
 							if ( google.earth.isSupported() ) {
 								var ge = new GoogleEarth( map );
 								var setTilt = function() {
-									
+
 									if ( ge.getInstance() !== undefined ) {
-									
+
 										 var center = map.getCenter();
 										  var lookAt = ge.instance_.createLookAt('');
 										  var range = Math.pow(2, GoogleEarth.MAX_EARTH_ZOOM_ - map.getZoom());
@@ -396,27 +396,27 @@
 										  lookAt.setLongitude(center.lng());
 										  lookAt.setHeading(0);
 										  lookAt.setAltitude(0);
-										  
-										    // Teleport to the pre-tilt view immediately.
+
+											// Teleport to the pre-tilt view immediately.
 										  ge.instance_.getOptions().setFlyToSpeed(5);
 										  ge.instance_.getView().setAbstractView(lookAt);
-										    lookAt.setTilt(options.tilt);
-										    // Fly to the tilt at regular speed in 200ms
-										    ge.instance_.getOptions().setFlyToSpeed(0.75);
-										    window.setTimeout(function() {
-										    	ge.instance_.getView().setAbstractView(lookAt);
-										    }, 200);
-										    // Set the flyto speed back to default after the animation starts.
-										    window.setTimeout(function() {
-										    	ge.instance_.getOptions().setFlyToSpeed(1);
-										    }, 250);
-											
+											lookAt.setTilt(options.tilt);
+											// Fly to the tilt at regular speed in 200ms
+											ge.instance_.getOptions().setFlyToSpeed(0.75);
+											window.setTimeout(function() {
+												ge.instance_.getView().setAbstractView(lookAt);
+											}, 200);
+											// Set the flyto speed back to default after the animation starts.
+											window.setTimeout(function() {
+												ge.instance_.getOptions().setFlyToSpeed(1);
+											}, 250);
+
 									}
 									else {
 										setTimeout( function() { setTilt(); }, 100 );
 									}
 								};
-								
+
 								if ( options.type == 'earth' ) {
 									map.setMapTypeId( GoogleEarth.MAP_TYPE_ID );
 									setTilt();
@@ -425,7 +425,7 @@
 									google.maps.event.addListenerOnce( map, 'maptypeid_changed', function() { setTilt(); } );
 								}
 							}
-							
+
 							_this.addOverlays();
 						} );	
 					} } );
@@ -435,71 +435,90 @@
 		else {
 			google.maps.event.addListenerOnce( map, 'tilesloaded', function() { _this.addOverlays(); } );
 		}
-		
+
 		if ( options.autoinfowindows ) {
 			for ( var i = this.markers.length - 1; i >= 0; i-- ) {
 				google.maps.event.trigger( this.markers[i], 'click' );
 			}		
 		}
-		
+
 		if ( options.resizable ) {
 			mw.loader.using( 'ext.maps.resizable', function() {
 				_this.resizable();
 			} );
 		}		
 
-        /**
-         * used in display_line functionality
-         * draws paths between markers
-         */
-        if(options.lines){
-            for ( var i = 0; i < options.lines.length; i++ ) {
-                this.addLine(options.lines[i]);
-            }
-        }
-
-        /**
-         * used in display_line to draw polygons
-         */
-        if(options.polygons){
-            for ( var i = 0; i < options.polygons.length; i++ ) {
-                this.addPolygon(options.polygons[i]);
-            }
-        }
-
-        /**
-         * used in display_line functionality
-         * allows the copy to clipboard of coordinates
-         */
-        if(options.copycoords){
-            function addRightClickListener(object){
-                google.maps.event.addListener( object, 'rightclick', function(event) {
-                    prompt(mediaWiki.msg( 'maps-copycoords-prompt' ),event.latLng.lat()+','+event.latLng.lng());
-                });
-            }
-
-            for(var x = 0; x < this.markers.length; x++){
-                addRightClickListener(this.markers[x]);
-            }
-
-            for(var x = 0; x < this.lines.length; x++){
-                addRightClickListener(this.lines[x]);
-            }
-
-            addRightClickListener(this.map);
-        }
-
-        /**
-         * used in display_line functionality
-         * allows grouping of markers
-         */
-        if(options.markercluster){
-            this.markercluster = new MarkerClusterer(this.map,this.markers);
-        }
+		/**
+		 * used in display_line functionality
+		 * draws paths between markers
+		 */
+		if(options.lines){
+			for ( var i = 0; i < options.lines.length; i++ ) {
+				this.addLine(options.lines[i]);
+			}
+		}
+
+		/**
+		 * used in display_line to draw polygons
+		 */
+		if(options.polygons){
+			for ( var i = 0; i < options.polygons.length; i++ ) {
+				this.addPolygon(options.polygons[i]);
+			}
+		}
+
+		/**
+		 * used in display_line functionality
+		 * allows the copy to clipboard of coordinates
+		 */
+		if(options.copycoords){
+			function addRightClickListener(object){
+				google.maps.event.addListener( object, 'rightclick', function(event) {
+					prompt(mediaWiki.msg( 'maps-copycoords-prompt' ),event.latLng.lat()+','+event.latLng.lng());
+				});
+			}
+
+			for(var x = 0; x < this.markers.length; x++){
+				addRightClickListener(this.markers[x]);
+			}
+
+			for(var x = 0; x < this.lines.length; x++){
+				addRightClickListener(this.lines[x]);
+			}
+
+			addRightClickListener(this.map);
+		}
+
+		/**
+		 * used in display_line functionality
+		 * allows grouping of markers
+		 */
+		if(options.markercluster){
+			this.markercluster = new MarkerClusterer(this.map,this.markers);
+		}
+
+		if(options.searchmarkers){
+			var searchBox = $('<div style="text-align: right;">'+mediaWiki.msg( 'maps-searchmarkers-text' )+': <input type="text" /></div>');
+			$(this.map.getDiv()).before(searchBox);
+
+			searchBox.find('input').keyup(function(e){
+				for(var i = 0; i < _this.markers.length; i++){
+					var haystack = '';
+					var marker = _this.markers[i];
+					if(options.searchmarkers == 'title'){
+						haystack = marker.title;
+					}else if(options.searchmarkers == 'all'){
+						haystack = marker.title+marker.text;
+					}
+
+					marker.setVisible(haystack.toLowerCase().indexOf(e.target.value.toLowerCase()) != -1);
+				}
+			});
+		}
 
 	};
 	this.setup();
-	
+
 	return this;
-	
+
 }; })( jQuery, window.mediaWiki );
\ No newline at end of file
diff --git a/includes/services/OpenLayers/jquery.openlayers.js b/includes/services/OpenLayers/jquery.openlayers.js
index 9b60406..7d8f476 100644
--- a/includes/services/OpenLayers/jquery.openlayers.js
+++ b/includes/services/OpenLayers/jquery.openlayers.js
@@ -74,7 +74,12 @@
 			}
 			
 			if ( bounds != null ) bounds.extend( location.lonlat ); // Extend the bounds when no center is set.
-			curLayer.addMarker( this.getOLMarker( curLayer, location ) ); // Create and add the marker.
+            var marker = this.getOLMarker( curLayer, location );
+            this.markers.push({
+                    target: marker,
+                    data:location
+            });
+			curLayer.addMarker( marker ); // Create and add the marker.
 		}
 		
 		if ( bounds != null ) map.zoomToExtent( bounds ); // If a bounds object has been created, use it to set the zoom and center.
@@ -176,6 +181,7 @@
 	}
 
     var _this = this;
+    this.markers = [];
 
 	// Remove the loading map message.
 	this.text( '' );
@@ -394,6 +400,25 @@
     if(options.markercluster){
         alert(mediaWiki.msg('maps-clustering-unsupportedservice'));
     }
+
+    if(options.searchmarkers){
+        var searchBox = $('<div style="text-align: right;">'+mediaWiki.msg( 'maps-searchmarkers-text' )+': <input type="text" /></div>');
+        $(this.map.div).before(searchBox);
+
+        searchBox.find('input').keyup(function(e){
+            for(var i = 0; i < _this.markers.length; i++){
+                var haystack = '';
+                var marker = _this.markers[i];
+                if(options.searchmarkers == 'title'){
+                    haystack = marker.data.title;
+                }else if(options.searchmarkers == 'all'){
+                    haystack = marker.data.title+marker.data.text;
+                }
+
+                marker.target.display(haystack.toLowerCase().indexOf(e.target.value.toLowerCase()) != -1);
+            }
+        });
+    }
 	return this;
 	
 }; })( jQuery );
-- 
1.7.9.5

