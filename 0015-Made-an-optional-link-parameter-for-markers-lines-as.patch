From 03cd4d548ef7ae4265888ab807c5ee55f2e6dbe2 Mon Sep 17 00:00:00 2001
From: Kim Eik <kim@heldig.org>
Date: Mon, 7 May 2012 14:41:59 +0200
Subject: [PATCH 15/32] Made an optional link parameter for markers, lines as
 an alternative to a text bubble.

This change is intended for the use case where one wishes to create a marker,
line, or polygon to be linked to a wiki page or an external url. and so when
clicking the marker/line/polygon will refer the users browser directly to the
specified url. This was previously solved through creating a text bubble with
a link.

This change however makes it possible to omit that extra step.

example code:
==Marker with absolute link==
{{#display_line:
Bergen~link:http://www.visitbergen.com/
}}

==Marker with wiki link==
{{#display_line:
Bergen~link:Bergen
}}

==Marker with bubble (standard)==
{{#display_line:
Bergen~[[Bergen]]~Is a city in Norway
}}

==Line with absolute link==
{{#display_line:
|centre=Bergen
|lines=Bergen:Kalfaret~link:http://www.visitbergen.com/
}}

==Line with wiki link==
{{#display_line:
|centre=Bergen
|lines=Bergen:Kalfaret~link:Bergen
}}

==Line with bubble (standard)==
{{#display_line:
|centre=Bergen
|lines=Bergen:Kalfaret~[[Bergen and kalfaret]]~Is a busy area of Bergen
}}

==Polygon with absolute link==
{{#display_line:
|centre=Bergen
|polygons=Bergen:Kalfaret:Bergen Bryggen~link:http://www.visitbergen.com/
}}

==Polygon with wiki link==
{{#display_line:
|centre=Bergen
|polygons=Bergen:Kalfaret:Bergen Bryggen~link:Bergen
}}

==Plygon with bubble (standard)==
{{#display_line:
|centre=Bergen
|polygons=Bergen:Kalfaret:Bergen Bryggen~This polygon~Is a busy area of Bergen
}}

This feature has been implemented for google maps and openlayers.

In this change i had to add a Maps_Utils.php file to share identical code
between manipulation classes. But maybe this isn't the way to do it, any
feedback is appreciated.

* fixed indentation (i think)

Change-Id: I269930a19874488a4e93ab3d061fbff7a1a961fb
---
 Maps.php                                          |   77 +--
 includes/Maps_Line.php                            |  352 ++++++-------
 includes/Maps_Location.php                        |  181 ++++---
 includes/Maps_Polygon.php                         |    4 +-
 includes/Maps_Utils.php                           |   39 ++
 includes/criteria/CriterionLine.php               |    4 +
 includes/criteria/CriterionPolygon.php            |    5 +
 includes/manipulations/Maps_ParamLine.php         |   90 ++--
 includes/manipulations/Maps_ParamLocation.php     |   22 +-
 includes/manipulations/Maps_ParamPolygon.php      |   60 ++-
 includes/services/GoogleMaps3/jquery.googlemap.js |  170 +++----
 includes/services/OpenLayers/jquery.openlayers.js |  542 +++++++++++----------
 12 files changed, 841 insertions(+), 705 deletions(-)
 create mode 100644 includes/Maps_Utils.php

diff --git a/Maps.php b/Maps.php
index 4558911..e8c43fc 100644
--- a/Maps.php
+++ b/Maps.php
@@ -85,6 +85,7 @@ $wgAutoloadClasses['MapsPolygon'] 				= $incDir . 'Maps_Polygon.php';
 $wgAutoloadClasses['iMappingService'] 			= $incDir . 'iMappingService.php';
 $wgAutoloadClasses['MapsMappingServices'] 		= $incDir . 'Maps_MappingServices.php';
 $wgAutoloadClasses['MapsMappingService'] 		= $incDir . 'Maps_MappingService.php';
+$wgAutoloadClasses['MapsUtils']                 = $incDir . 'Maps_Utils.php';
 
 $wgAutoloadClasses['ApiGeocode'] 				= $incDir . 'api/ApiGeocode.php';
 
@@ -178,60 +179,60 @@ $egMapsFeatures['pf'][]	= 'MapsDisplayLine::initialize';
 
 # Parser hooks
 
-	# Required for #coordinates.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsCoordinates::staticInit';
-	# Required for #display_map.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayMap::staticInit';
-	# Required for #display_point.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayPoint::staticInit';
-	# Required for #display_line.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayLine::staticInit';
-	# Required for #distance.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsDistance::staticInit';
-	# Required for #finddestination.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsFinddestination::staticInit';
-	# Required for #geocode.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsGeocode::staticInit';
-	# Required for #geodistance.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsGeodistance::staticInit';
-	# Required for #mapsdoc.
-	$wgHooks['ParserFirstCallInit'][] = 'MapsMapsDoc::staticInit';
+# Required for #coordinates.
+$wgHooks['ParserFirstCallInit'][] = 'MapsCoordinates::staticInit';
+# Required for #display_map.
+$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayMap::staticInit';
+# Required for #display_point.
+$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayPoint::staticInit';
+# Required for #display_line.
+$wgHooks['ParserFirstCallInit'][] = 'MapsDisplayLine::staticInit';
+# Required for #distance.
+$wgHooks['ParserFirstCallInit'][] = 'MapsDistance::staticInit';
+# Required for #finddestination.
+$wgHooks['ParserFirstCallInit'][] = 'MapsFinddestination::staticInit';
+# Required for #geocode.
+$wgHooks['ParserFirstCallInit'][] = 'MapsGeocode::staticInit';
+# Required for #geodistance.
+$wgHooks['ParserFirstCallInit'][] = 'MapsGeodistance::staticInit';
+# Required for #mapsdoc.
+$wgHooks['ParserFirstCallInit'][] = 'MapsMapsDoc::staticInit';
 
 # Geocoders
 
-	# Registration of the GeoNames service geocoder.
-	$wgHooks['GeocoderFirstCallInit'][] = 'MapsGeonamesGeocoder::register';
+# Registration of the GeoNames service geocoder.
+$wgHooks['GeocoderFirstCallInit'][] = 'MapsGeonamesGeocoder::register';
 
-	# Registration of the Google Geocoding (v2) service geocoder.
-	$wgHooks['GeocoderFirstCallInit'][] = 'MapsGoogleGeocoder::register';
+# Registration of the Google Geocoding (v2) service geocoder.
+$wgHooks['GeocoderFirstCallInit'][] = 'MapsGoogleGeocoder::register';
 
-	# Registration of the Yahoo! Geocoding service geocoder.
-	$wgHooks['GeocoderFirstCallInit'][] = 'MapsYahooGeocoder::register';
+# Registration of the Yahoo! Geocoding service geocoder.
+$wgHooks['GeocoderFirstCallInit'][] = 'MapsYahooGeocoder::register';
 
 # Layers
 
-	# Registration of the image layer type.
-	$wgHooks['MappingLayersInitialization'][] = 'MapsImageLayer::register';
+# Registration of the image layer type.
+$wgHooks['MappingLayersInitialization'][] = 'MapsImageLayer::register';
 
-	# Registration of the KML layer type.
-	$wgHooks['MappingLayersInitialization'][] = 'MapsKMLLayer::register';
+# Registration of the KML layer type.
+$wgHooks['MappingLayersInitialization'][] = 'MapsKMLLayer::register';
 
 # Mapping services
 
-	# Include the mapping services that should be loaded into Maps.
-	# Commenting or removing a mapping service will make Maps completely ignore it, and so improve performance.
+# Include the mapping services that should be loaded into Maps.
+# Commenting or removing a mapping service will make Maps completely ignore it, and so improve performance.
 
-	# Google Maps API v3
-	include_once $egMapsDir . 'includes/services/GoogleMaps3/GoogleMaps3.php';
+# Google Maps API v3
+include_once $egMapsDir . 'includes/services/GoogleMaps3/GoogleMaps3.php';
 
-	# OpenLayers API
-	include_once $egMapsDir . 'includes/services/OpenLayers/OpenLayers.php';
+# OpenLayers API
+include_once $egMapsDir . 'includes/services/OpenLayers/OpenLayers.php';
 
-	# Yahoo! Maps API
-	include_once $egMapsDir . 'includes/services/YahooMaps/YahooMaps.php';
+# Yahoo! Maps API
+include_once $egMapsDir . 'includes/services/YahooMaps/YahooMaps.php';
 
-	# WMF OSM
-	include_once $egMapsDir . 'includes/services/OSM/OSM.php';
+# WMF OSM
+include_once $egMapsDir . 'includes/services/OSM/OSM.php';
 
 $egMapsSettings = array();
 
diff --git a/includes/Maps_Line.php b/includes/Maps_Line.php
index 0771cde..18ce78d 100644
--- a/includes/Maps_Line.php
+++ b/includes/Maps_Line.php
@@ -13,173 +13,187 @@
 class MapsLine{
 
 
-    /**
-     * @var
-     */
-    protected $lineCoords;
-
-    /**
-     * @var
-     */
-    protected $title;
-
-    /**
-     * @var
-     */
-    protected $text;
-
-    /**
-     * @var
-     */
-    protected $strokeColor;
-    /**
-     * @var
-     */
-    protected $strokeOpacity;
-    /**
-     * @var
-     */
-    protected $strokeWeight;
-
-    /**
-     *
-     */
-    function __construct($coords)
-    {
-        $this->setLineCoords($coords);
-    }
-
-    /**
-     * @param \text $text
-     */
-    public function setText($text)
-    {
-        $this->text = $text;
-    }
-
-    /**
-     * @return \text
-     */
-    public function getText()
-    {
-        return $this->text;
-    }
-
-    /**
-     * @param \title $title
-     */
-    public function setTitle($title)
-    {
-        $this->title = $title;
-    }
-
-    /**
-     * @return \title
-     */
-    public function getTitle()
-    {
-        return $this->title;
-    }
-
-    protected function setLineCoords($lineCoords)
-    {
-        foreach($lineCoords as $lineCoord){
-            $this->lineCoords[] = new MapsLocation($lineCoord);
-        }
-    }
-
-    protected function getLineCoords()
-    {
-        return $this->lineCoords;
-    }
-
-    public function getJSONObject( $defText = '', $defTitle = '') {
-        $posArray = array();
-        foreach ($this->lineCoords as $mapLocation){
-            $posArray[] = array(
-                'lat' => $mapLocation->getLatitude(),
-                'lon' => $mapLocation->getLongitude()
-            );
-        }
-
-        return array(
-            'pos' => $posArray,
-            'text' => $this->hasText() ? $this->getText() : $defText,
-            'title' => $this->hasTitle() ? $this->getTitle() : $defTitle,
-            'strokeColor' => $this->hasStrokeColor() ? $this->getStrokeColor() : '#FF0000',
-            'strokeOpacity' => $this->hasStrokeOpacity() ? $this->getStrokeOpacity() : '1',
-            'strokeWeight' => $this->hasStrokeWeight() ? $this->getStrokeWeight() : '2'
-        );
-    }
-
-
-    /**
-     * @param  $strokeColor
-     */
-    public function setStrokeColor($strokeColor)
-    {
-        $this->strokeColor = $strokeColor;
-    }
-
-    /**
-     * @return
-     */
-    public function getStrokeColor()
-    {
-        return $this->strokeColor;
-    }
-
-    /**
-     * @param  $strokeOpacity
-     */
-    public function setStrokeOpacity($strokeOpacity)
-    {
-        $this->strokeOpacity = $strokeOpacity;
-    }
-
-    /**
-     * @return
-     */
-    public function getStrokeOpacity()
-    {
-        return $this->strokeOpacity;
-    }
-
-    /**
-     * @param  $strokeWeight
-     */
-    public function setStrokeWeight($strokeWeight)
-    {
-        $this->strokeWeight = $strokeWeight;
-    }
-
-    /**
-     * @return
-     */
-    public function getStrokeWeight()
-    {
-        return $this->strokeWeight;
-    }
-
-
-    public function hasText(){
-        return $this->text !== '';
-    }
-
-    public function hasTitle(){
-        return $this->title !== '';
-    }
-
-    public function hasStrokeColor(){
-        return $this->strokeColor !== '';
-    }
-
-    public function hasStrokeOpacity(){
-        return $this->strokeOpacity !== '';
-    }
-
-
-    public function hasStrokeWeight(){
-        return $this->strokeWeight !== '';
-    }
+	/**
+	 * @var
+	 */
+	protected $lineCoords;
+
+	/**
+	 * @var
+	 */
+	protected $title;
+
+	/**
+	 * @var
+	 */
+	protected $text;
+
+	/**
+	 * @var
+	 */
+	protected $strokeColor;
+	/**
+	 * @var
+	 */
+	protected $strokeOpacity;
+	/**
+	 * @var
+	 */
+	protected $strokeWeight;
+
+	/**
+	 * @var
+	 */
+	protected $link;
+
+	/**
+	 *
+	 */
+	function __construct($coords)
+	{
+		$this->setLineCoords($coords);
+	}
+
+	/**
+	 * @param \text $text
+	 */
+	public function setText($text)
+	{
+		$this->text = $text;
+	}
+
+	/**
+	 * @return \text
+	 */
+	public function getText()
+	{
+		return $this->text;
+	}
+
+	/**
+	 * @param \title $title
+	 */
+	public function setTitle($title)
+	{
+		$this->title = $title;
+	}
+
+	/**
+	 * @return \title
+	 */
+	public function getTitle()
+	{
+		return $this->title;
+	}
+
+	protected function setLineCoords($lineCoords)
+	{
+		foreach($lineCoords as $lineCoord){
+			$this->lineCoords[] = new MapsLocation($lineCoord);
+		}
+	}
+
+	protected function getLineCoords()
+	{
+		return $this->lineCoords;
+	}
+
+	public function getJSONObject( $defText = '', $defTitle = '') {
+		$posArray = array();
+		foreach ($this->lineCoords as $mapLocation){
+			$posArray[] = array(
+				'lat' => $mapLocation->getLatitude(),
+				'lon' => $mapLocation->getLongitude()
+			);
+		}
+
+		return array(
+			'pos' => $posArray,
+			'text' => $this->hasText() ? $this->getText() : $defText,
+			'title' => $this->hasTitle() ? $this->getTitle() : $defTitle,
+			'link' => $this->getLink(),
+			'strokeColor' => $this->hasStrokeColor() ? $this->getStrokeColor() : '#FF0000',
+			'strokeOpacity' => $this->hasStrokeOpacity() ? $this->getStrokeOpacity() : '1',
+			'strokeWeight' => $this->hasStrokeWeight() ? $this->getStrokeWeight() : '2'
+		);
+	}
+
+
+	/**
+	 * @param  $strokeColor
+	 */
+	public function setStrokeColor($strokeColor)
+	{
+		$this->strokeColor = $strokeColor;
+	}
+
+	/**
+	 * @return
+	 */
+	public function getStrokeColor()
+	{
+		return $this->strokeColor;
+	}
+
+	/**
+	 * @param  $strokeOpacity
+	 */
+	public function setStrokeOpacity($strokeOpacity)
+	{
+		$this->strokeOpacity = $strokeOpacity;
+	}
+
+	/**
+	 * @return
+	 */
+	public function getStrokeOpacity()
+	{
+		return $this->strokeOpacity;
+	}
+
+	/**
+	 * @param  $strokeWeight
+	 */
+	public function setStrokeWeight($strokeWeight)
+	{
+		$this->strokeWeight = $strokeWeight;
+	}
+
+	/**
+	 * @return
+	 */
+	public function getStrokeWeight()
+	{
+		return $this->strokeWeight;
+	}
+
+	public function setLink($link){
+		$this->link = $link;
+	}
+
+	public function getLink(){
+		return $this->link;
+	}
+
+
+	public function hasText(){
+		return !is_null($this->text) && $this->text !== '';
+	}
+
+	public function hasTitle(){
+		return !is_null($this->title) && $this->title !== '';
+	}
+
+	public function hasStrokeColor(){
+		return !is_null($this->strokeColor) && $this->strokeColor !== '';
+	}
+
+	public function hasStrokeOpacity(){
+		return !is_null($this->strokeOpacity) && $this->strokeOpacity !== '';
+	}
+
+
+	public function hasStrokeWeight(){
+		return !is_null($this->strokeWeight) && $this->strokeWeight !== '';
+	}
 }
diff --git a/includes/Maps_Location.php b/includes/Maps_Location.php
index 9219aac..e9b63f0 100644
--- a/includes/Maps_Location.php
+++ b/includes/Maps_Location.php
@@ -4,7 +4,7 @@
  * Class describing a single location (geographical point).
  *
  * @since 0.7.1
- * 
+ *
  * @file Maps_Location.php
  * @ingroup Maps
  *
@@ -16,63 +16,63 @@ class MapsLocation {
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var float
-	 */	
+	 */
 	protected $latitude;
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var float
-	 */	
+	 */
 	protected $longitude;
 
 	/**
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @var float
-	 */	
-	protected $altitude = 0;	
+	 */
+	protected $altitude = 0;
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var string
 	 */
 	protected $address;
 
 	/**
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @var string
-	 */	
+	 */
 	protected $title = '';
 
 	/**
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @var string
-	 */		
+	 */
 	protected $text = '';
 
 	/**
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @var string
-	 */		
+	 */
 	protected $icon = '';
 
 	/**
 	 * @since 1.1
-	 * 
+	 *
 	 * @var string
-	 */	
+	 */
 	protected $group = '';
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var boolean
 	 */
 	protected $isValid = false;
@@ -80,23 +80,23 @@ class MapsLocation {
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var string Element of the Maps_COORDS_ enum
 	 */
 	protected $format;
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var boolean
 	 */
 	protected $directional;
 
 	/**
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @var string
-	 */	
+	 */
 	protected $separator;
 
 	/**
@@ -105,6 +105,11 @@ class MapsLocation {
 	protected $inlineLabel;
 
 	/**
+	 * @var
+	 */
+	protected $link;
+
+	/**
 	 * Creates and returns a new instance of a MapsLocation from a latitude and longitude.
 	 *
 	 * @since 1.0
@@ -121,12 +126,12 @@ class MapsLocation {
 
 	/**
 	 * Creates and returns a new instance of a MapsLocation from an address.
-	 * 
+	 *
 	 * @since 1.0
-	 * 
+	 *
 	 * @param string $address
 	 * @param string $format
-	 * 
+	 *
 	 * @return MapsLocation
 	 */
 	public static function newFromAddress( $address, $format = Maps_COORDS_FLOAT ) {
@@ -135,12 +140,12 @@ class MapsLocation {
 
 	/**
 	 * Constructor.
-	 * 
+	 *
 	 * @param mixed $coordsOrAddress string or array with lat and lon
 	 * @param string $format
 	 * @param boolean $directional
 	 * @param string $separator
-	 * 
+	 *
 	 * @since 0.7.1
 	 */
 	public function __construct( $coordsOrAddress = null, $format = Maps_COORDS_FLOAT, $directional = false, $separator = ',' ) {
@@ -161,11 +166,11 @@ class MapsLocation {
 	/**
 	 * Sets the location to a set of coordinates. You can provide a string
 	 * of raw coordinates, an array with lat and lon values and false.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @param mixed $coordinates
-	 * 
+	 *
 	 * @return boolean Success indicator
 	 */
 	public function setCoordinates( $coordinates ) {
@@ -180,12 +185,12 @@ class MapsLocation {
 
 	/**
 	 * Sets the location to an address.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @param string $address
 	 * @param boolean $asActualLocation When set to false, the location is not changed, only the address string is.
-	 * 
+	 *
 	 * @return boolean Success indicator
 	 */
 	public function setAddress( $address, $asActualLocation = true ) {
@@ -200,9 +205,9 @@ class MapsLocation {
 
 	/**
 	 * Returns if the location is valid.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @return boolean
 	 */
 	public function isValid() {
@@ -211,11 +216,11 @@ class MapsLocation {
 
 	/**
 	 * Returns the locations latitude.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @return float
-	 */	
+	 */
 	public function getLatitude() {
 		if ( !$this->isValid() ) {
 			throw new Exception( 'Attempt to get the latitude of an invalid location' );
@@ -225,9 +230,9 @@ class MapsLocation {
 
 	/**
 	 * Returns the locations longitude.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @return float
 	 */
 	public function getLongitude() {
@@ -239,9 +244,9 @@ class MapsLocation {
 
 	/**
 	 * Returns the locations altitude.
-	 * 
+	 *
 	 * @since 0.7.3
-	 * 
+	 *
 	 * @return float
 	 */
 	public function getAltitude() {
@@ -249,23 +254,23 @@ class MapsLocation {
 			throw new Exception( 'Attempt to get the altitude of an invalid location' );
 		}
 		return $this->altitude;
-	}	
+	}
 
 	/**
 	 * Returns the locations coordinates formatted in the specified notation.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @param string $format Element of the Maps_COORDS_ enum
 	 * @param boolean $directional
 	 * @param string $separator
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getCoordinates( $format = null, $directional = null, $separator = null ) {
 		if ( !$this->isValid() ) {
 			throw new Exception( 'Attempt to get the coordinates for an invalid location' );
-		}		
+		}
 		return MapsCoordinateParser::formatCoordinates(
 			array( 'lat' => $this->latitude, 'lon' => $this->longitude ),
 			is_null( $format ) ? $this->format : $format,
@@ -277,11 +282,11 @@ class MapsLocation {
 	/**
 	 * Returns the address corresponding to this location.
 	 * If there is none, and empty sting is returned.
-	 * 
+	 *
 	 * @since 0.7.1
-	 * 
+	 *
 	 * @param boolean $geocodeIfEmpty
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getAddress( $geocodeIfEmpty = true ) {
@@ -302,9 +307,9 @@ class MapsLocation {
 
 	/**
 	 * Sets the title.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @param string $title
 	 */
 	public function setTitle( $title ) {
@@ -313,31 +318,31 @@ class MapsLocation {
 
 	/**
 	 * Sets the text.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @param string $text
 	 */
 	public function setText( $text ) {
 		$this->text = trim( $text );
-	}	
+	}
 
 	/**
 	 * Returns if there is any icon.
-	 * 
+	 *
 	 * @since 1.0
-	 * 
+	 *
 	 * @return boolean
 	 */
 	public function hasIcon() {
 		return $this->icon !== '';
-	}		
+	}
 
 	/**
 	 * Sets the icon
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @param string $icon
 	 */
 	public function setIcon( $icon ) {
@@ -346,9 +351,9 @@ class MapsLocation {
 
 	/**
 	 * Sets the group
-	 * 
+	 *
 	 * @since 1.1
-	 * 
+	 *
 	 * @param string $group
 	 */
 	public function setGroup( $group ) {
@@ -357,20 +362,20 @@ class MapsLocation {
 
 	/**
 	 * Returns if there is any title.
-	 * 
+	 *
 	 * @since 1.0
-	 * 
+	 *
 	 * @return boolean
 	 */
 	public function hasTitle() {
 		return $this->title !== '';
-	}	
+	}
 
 	/**
 	 * Returns the title.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getTitle() {
@@ -379,9 +384,9 @@ class MapsLocation {
 
 	/**
 	 * Returns if there is any text.
-	 * 
+	 *
 	 * @since 1.0
-	 * 
+	 *
 	 * @return boolean
 	 */
 	public function hasText() {
@@ -390,9 +395,9 @@ class MapsLocation {
 
 	/**
 	 * Returns the text.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getText() {
@@ -401,9 +406,9 @@ class MapsLocation {
 
 	/**
 	 * Returns the icon.
-	 * 
+	 *
 	 * @since 0.7.2
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getIcon() {
@@ -412,9 +417,9 @@ class MapsLocation {
 
 	/**
 	 * Returns the group.
-	 * 
+	 *
 	 * @since 1.1
-	 * 
+	 *
 	 * @return string
 	 */
 	public function getGroup() {
@@ -423,15 +428,32 @@ class MapsLocation {
 
 	/**
 	 * Returns whether Location is asigned to a group.
-	 * 
+	 *
 	 * @since 1.1
-	 * 
+	 *
 	 * @return string
 	 */
 	public function hasGroup() {
 		return $this->group != '';
 	}
 
+
+	/**
+	 * @return
+	 */
+	public function getLink()
+	{
+		return $this->link;
+	}
+
+	/**
+	 * @param  $link
+	 */
+	public function setLink($link)
+	{
+		$this->link = $link;
+	}
+
 	/**
 	 * @return string
 	 */
@@ -455,7 +477,7 @@ class MapsLocation {
 
 	/**
 	 * Returns an object that can directly be converted to JS using json_encode or similar.
-	 * 
+	 *
 	 * @since 1.0
 	 *
 	 * @param string $defText
@@ -476,7 +498,8 @@ class MapsLocation {
 			'address' => $this->getAddress( false ),
 			'icon' => $this->hasIcon() ? MapsMapper::getFileUrl( $this->getIcon() ) : $defIconUrl,
 			'group' => $this->hasGroup() ?  $this->getGroup() : $defGroup,
-			'inlineLabel' => $this->hasInlineLabel() ? $this->getInlineLabel() : $defInlineLabel
+			'inlineLabel' => $this->hasInlineLabel() ? $this->getInlineLabel() : $defInlineLabel,
+			'link' => $this->getLink(),
 		);
 	}
 
diff --git a/includes/Maps_Polygon.php b/includes/Maps_Polygon.php
index 51ac2ae..db4e7ed 100644
--- a/includes/Maps_Polygon.php
+++ b/includes/Maps_Polygon.php
@@ -40,11 +40,11 @@ class MapsPolygon extends MapsLine{
 	}
 
 	private function hasFillColor(){
-		return $this->fillColor !== '';
+		return !is_null($this->fillColor) && $this->fillColor !== '';
 	}
 
 	private function hasFillOpacity(){
-		return $this->fillOpacity !== '';
+		return !is_null($this->fillOpacity) && $this->fillOpacity !== '';
 	}
 
 	/**
diff --git a/includes/Maps_Utils.php b/includes/Maps_Utils.php
new file mode 100644
index 0000000..ef7e0ec
--- /dev/null
+++ b/includes/Maps_Utils.php
@@ -0,0 +1,39 @@
+<?php
+
+class MapsUtils {
+
+	/**
+	 * Checks if a given url is valid. (requires a schema present)
+	 * @static
+	 * @param $url
+	 * @return mixed
+	 */
+	static function isValidURL($url){
+		return filter_var($url, FILTER_VALIDATE_URL,FILTER_FLAG_SCHEME_REQUIRED);
+	}
+
+
+	/**
+	 * Checks if a string is prefixed with link:
+	 * @static
+	 * @param $link
+	 * @return bool|string
+	 */
+	static function isLinkParameter($link){
+		if(self::strStartsWith($link,'link:')){
+			return substr($link,5);
+		}
+		return false;
+	}
+
+	/**
+	 * Helper function that returns true if a $haystack (string) starts with $needle
+	 * @static
+	 * @param $haystack
+	 * @param $needle
+	 * @return bool
+	 */
+	static function strStartsWith($haystack, $needle){
+		return strpos($haystack, $needle) === 0;
+	}
+}
\ No newline at end of file
diff --git a/includes/criteria/CriterionLine.php b/includes/criteria/CriterionLine.php
index 9636b51..0d1358f 100644
--- a/includes/criteria/CriterionLine.php
+++ b/includes/criteria/CriterionLine.php
@@ -38,6 +38,10 @@ class CriterionLine extends ItemParameterCriterion
      */
     protected function doValidation($value, Parameter $parameter, array $parameters)
     {
+	    //fetch locations
+	    $value = explode($this->metaDataSeparator,$value);
+	    $value = $value[0];
+
         //need atleast two points to create a line
         $valid = strpos($value, ':') != false;
         if (!$valid) {
diff --git a/includes/criteria/CriterionPolygon.php b/includes/criteria/CriterionPolygon.php
index 072c4a8..4e1cd0c 100644
--- a/includes/criteria/CriterionPolygon.php
+++ b/includes/criteria/CriterionPolygon.php
@@ -38,6 +38,11 @@ class CriterionPolygon extends ItemParameterCriterion
      */
     protected function doValidation($value, Parameter $parameter, array $parameters)
     {
+
+	    //fetch locations
+	    $value = explode($this->metaDataSeparator,$value);
+	    $value = $value[0];
+
         //need atleast two points to create a polygon
         $valid = strpos($value, ':') != false;
         if (!$valid) {
diff --git a/includes/manipulations/Maps_ParamLine.php b/includes/manipulations/Maps_ParamLine.php
index 35f9c10..5d714f0 100644
--- a/includes/manipulations/Maps_ParamLine.php
+++ b/includes/manipulations/Maps_ParamLine.php
@@ -3,37 +3,61 @@ class MapsParamLine extends ItemParameterManipulation {
 
 
 
-    protected $metaDataSeparator;
-
-    public function __construct( $metaDataSeparator ) {
-        parent::__construct();
-
-        $this->metaDataSeparator = $metaDataSeparator;
-    }
-
-    /**
-     * Manipulate an actual value.
-     *
-     * @param string $value
-     * @param Parameter $parameter
-     * @param array $parameters
-     *
-     * @since 0.4
-     *
-     * @return mixed
-     */
-    public function doManipulation(&$value, Parameter $parameter, array &$parameters)
-    {
-      $parts = explode($this->metaDataSeparator,$value);
-      $lineCoords = explode(':',$parts[0]);
-
-      $value = new MapsLine($lineCoords);
-      $value->setTitle( isset($parts[1]) ? $parts[1] : '' );
-      $value->setText( isset($parts[2]) ? $parts[2] : '' );
-      $value->setStrokeColor( isset($parts[3]) ? $parts[3] : '' );
-      $value->setStrokeOpacity( isset($parts[4]) ? $parts[4] : '' );
-      $value->setStrokeWeight( isset($parts[5]) ? $parts[5] : '' );
-
-      $value = $value->getJSONObject();
-    }
+	protected $metaDataSeparator;
+
+	public function __construct( $metaDataSeparator ) {
+		parent::__construct();
+
+		$this->metaDataSeparator = $metaDataSeparator;
+	}
+
+	/**
+	 * Manipulate an actual value.
+	 *
+	 * @param string $value
+	 * @param Parameter $parameter
+	 * @param array $parameters
+	 *
+	 * @since 0.4
+	 *
+	 * @return mixed
+	 */
+	public function doManipulation(&$value, Parameter $parameter, array &$parameters)
+	{
+	  $parts = explode($this->metaDataSeparator,$value);
+	  $lineCoords = explode(':',array_shift($parts));
+
+	  $value = new MapsLine($lineCoords);
+	  $linkOrTitle =  array_shift($parts);
+	  if($link = MapsUtils::isLinkParameter($linkOrTitle)){
+		  if(MapsUtils::isValidURL($link)){
+			  $value->setLink($link);
+		  }else{
+			  $title = Title::newFromText($link);
+			  $value->setLink($title->getFullURL());
+		  }
+	  }else{
+		  //create bubble data
+		  if($linkOrTitle){
+			$value->setTitle($linkOrTitle);
+		  }
+		  if($text = array_shift($parts)){
+				$value->setText($text);
+		  }
+	  }
+
+	  if($color = array_shift($parts)){
+			$value->setStrokeColor($color);
+	  }
+
+	  if($opacity = array_shift($parts)){
+		 $value->setStrokeOpacity($opacity);
+	  }
+
+	  if($weight = array_shift($parts)){
+		$value->setStrokeWeight($weight);
+	  }
+
+	  $value = $value->getJSONObject();
+	}
 }
\ No newline at end of file
diff --git a/includes/manipulations/Maps_ParamLocation.php b/includes/manipulations/Maps_ParamLocation.php
index b08b58f..d61b0e3 100644
--- a/includes/manipulations/Maps_ParamLocation.php
+++ b/includes/manipulations/Maps_ParamLocation.php
@@ -55,14 +55,24 @@ class MapsParamLocation extends ItemParameterManipulation {
 		$value = array_shift( $parts );
 		$value = new MapsLocation( $value );
 
-		if ( $title = array_shift( $parts ) ) {
-			$value->setTitle( $title );
-		}
+		$linkOrTitle = array_shift( $parts );
 
-		if ( $text = array_shift( $parts ) ) {
-			$value->setText( $text );
-		}
+		if($link = MapsUtils::isLinkParameter($linkOrTitle)){
+			if(MapsUtils::isValidURL($link)){
+				$value->setLink($link);
+			}else{
+				$title = Title::newFromText($link);
+				$value->setLink($title->getFullURL());
+			}
+		}else{
+			if ( $linkOrTitle ) {
+				$value->setTitle( $linkOrTitle );
+			}
 
+			if ( $text = array_shift( $parts ) ) {
+				$value->setText( $text );
+			}
+		}
 		if ( $icon = array_shift( $parts ) ) {
 			$value->setIcon( $icon );
 		}
diff --git a/includes/manipulations/Maps_ParamPolygon.php b/includes/manipulations/Maps_ParamPolygon.php
index 79c8665..bab719e 100644
--- a/includes/manipulations/Maps_ParamPolygon.php
+++ b/includes/manipulations/Maps_ParamPolygon.php
@@ -1,13 +1,6 @@
 <?php
-class MapsParamPolygon extends ItemParameterManipulation {
+class MapsParamPolygon extends MapsParamLine {
 
-	protected $metaDataSeparator;
-
-	public function __construct( $metaDataSeparator ) {
-		parent::__construct();
-
-		$this->metaDataSeparator = $metaDataSeparator;
-	}
 
 	/**
 	 * Manipulate an actual value.
@@ -22,19 +15,50 @@ class MapsParamPolygon extends ItemParameterManipulation {
 	 */
 	public function doManipulation(&$value, Parameter $parameter, array &$parameters)
 	{
+
 		$parts = explode($this->metaDataSeparator,$value);
-		$polygonCoords = explode(':',$parts[0]);
+		$polygonCoords = explode(':',array_shift($parts));
 
 		$value = new MapsPolygon($polygonCoords);
-		$value->setTitle( isset($parts[1]) ? $parts[1] : '' );
-		$value->setText( isset($parts[2]) ? $parts[2] : '' );
-		$value->setStrokeColor( isset($parts[3]) ? $parts[3] : '' );
-		$value->setStrokeOpacity( isset($parts[4]) ? $parts[4] : '' );
-		$value->setStrokeWeight( isset($parts[5]) ? $parts[5] : '' );
-		$value->setFillColor(isset($parts[6]) ? $parts[6] : '');
-		$value->setFillOpacity(isset($parts[7]) ? $parts[7] : '');
-
-		if(isset($parts[8])){
+		$linkOrTitle =  array_shift($parts);
+		if($link = MapsUtils::isLinkParameter($linkOrTitle)){
+			if(MapsUtils::isValidURL($link)){
+				$value->setLink($link);
+			}else{
+				$title = Title::newFromText($link);
+				$value->setLink($title->getFullURL());
+			}
+		}else{
+			//create bubble data
+			if($linkOrTitle){
+				$value->setTitle($linkOrTitle);
+			}
+			if($text = array_shift($parts)){
+				$value->setText($text);
+			}
+		}
+
+		if($color = array_shift($parts)){
+			$value->setStrokeColor($color);
+		}
+
+		if($opacity = array_shift($parts)){
+			$value->setStrokeOpacity($opacity);
+		}
+
+		if($weight = array_shift($parts)){
+			$value->setStrokeWeight($weight);
+		}
+
+		if($fillColor = array_shift($parts)){
+			$value->setFillColor($fillColor);
+		}
+
+		if($fillOpacity = array_shift($parts)){
+			$value->setFillOpacity($fillOpacity);
+		}
+
+		if($visibleOnHover = array_shift($parts)){
 			$value->setOnlyVisibleOnHover(filter_var($parts[8], FILTER_VALIDATE_BOOLEAN));
 		}
 
diff --git a/includes/services/GoogleMaps3/jquery.googlemap.js b/includes/services/GoogleMaps3/jquery.googlemap.js
index 31ba163..f75efc6 100644
--- a/includes/services/GoogleMaps3/jquery.googlemap.js
+++ b/includes/services/GoogleMaps3/jquery.googlemap.js
@@ -8,7 +8,6 @@
 (function( $, mw ){ $.fn.googlemaps = function( options ) {
 
 	var _this = this;
-
 	this.map = null;
 	this.markercluster = null;
 	this.options = options;
@@ -38,54 +37,41 @@
 	 * @param {Object} markerData Contains the fields lat, lon, title, text and icon
 	 * @return {google.maps.Marker}
 	 */
-		this.addMarker = function (markerData) {
-			var markerOptions = {
-				position:new google.maps.LatLng(markerData.lat, markerData.lon),
-				title:markerData.title,
-				labelContent:markerData.inlineLabel,
-				labelAnchor:new google.maps.Point(-15, 34),
-				labelClass:'markerwithlabel'
-			};
-
-			if (markerData.icon !== '') {
-				markerOptions.icon = markerData.icon;
-			}
+	this.addMarker = function (markerData) {
+		var markerOptions = {
+			position:new google.maps.LatLng(markerData.lat, markerData.lon),
+			title:markerData.title,
+			labelContent:markerData.inlineLabel,
+			labelAnchor:new google.maps.Point(-15, 34),
+			labelClass:'markerwithlabel'
+		};
 
-			var marker;
-			if (markerData.inlineLabel === undefined || markerData.inlineLabel.length == 0) {
-				marker = new google.maps.Marker(markerOptions);
-			} else {
-				marker = new MarkerWithLabel(markerOptions);
-			}
+		if (markerData.icon !== '') {
+			markerOptions.icon = markerData.icon;
+		}
 
-			marker.openWindow = false;
+		var marker;
+		if (markerData.inlineLabel === undefined || markerData.inlineLabel.length == 0) {
+			marker = new google.maps.Marker(markerOptions);
+		} else {
+			marker = new MarkerWithLabel(markerOptions);
+		}
 
-			if (markerData.text !== '') {
-				marker.text = markerData.text;
+		//Add onclick listener
+		google.maps.event.addListener( marker, 'click', function(e) {
+			if (e.target !== undefined && (e.target instanceof HTMLAnchorElement || e.target.tagName == 'A')) {
+				//click link defined in inlinelabel
+				window.location.href = e.target.href;
+			}else{
+				openBubbleOrLink.call(this, markerData, e, marker);
 			}
+		} );
 
-			google.maps.event.addListener(marker, 'click', function (e) {
-				if (e.target !== undefined && (e.target instanceof HTMLAnchorElement || e.target.tagName == 'A')) {
-					//click link defined in inlinelabel
-					window.location.href = e.target.href;
-				} else if (this.text !== undefined && this.text.length > 0) {
-					//open info window
-					if (this.openWindow !== false) {
-						this.openWindow.close();
-					}
-					this.openWindow = new google.maps.InfoWindow({ content:this.text });
-					this.openWindow.closeclick = function () {
-						marker.openWindow = false;
-					};
-					this.openWindow.open(_this.map, this);
-				}
-			});
+		marker.setMap(this.map);
+		this.markers.push(marker);
 
-			marker.setMap(this.map);
-			this.markers.push(marker);
-
-			return marker;
-		};
+		return marker;
+	};
 
 	/**
 	 * Removes a single marker from the map.
@@ -165,25 +151,16 @@
 		}
 
 		var line = new google.maps.Polyline({
-				map:this.map,
-				path:paths,
-				strokeColor:properties.strokeColor,
-				strokeOpacity:properties.strokeOpacity,
-				strokeWeight:properties.strokeWeight
+			map:this.map,
+			path:paths,
+			strokeColor:properties.strokeColor,
+			strokeOpacity:properties.strokeOpacity,
+			strokeWeight:properties.strokeWeight
 		});
 		this.lines.push(line);
 
 		google.maps.event.addListener(line,"click", function(event){
-			if (this.openWindow != undefined) {
-				this.openWindow.close();
-			}
-			this.openWindow = new google.maps.InfoWindow();
-			this.openWindow.content = properties.text;
-			this.openWindow.position = event.latLng;
-			this.openWindow.closeclick = function() {
-				line.openWindow = undefined;
-			};
-			this.openWindow.open(_this.map);
+			openBubbleOrLink.call(this, properties, event, line);
 		});
 	};
 
@@ -251,16 +228,7 @@
 
 		//add click event
 		google.maps.event.addListener(polygon,"click", function(event){
-			if (this.openWindow != undefined) {
-				this.openWindow.close();
-			}
-			this.openWindow = new google.maps.InfoWindow();
-			this.openWindow.content = properties.text;
-			this.openWindow.position = event.latLng;
-			this.openWindow.closeclick = function() {
-				polygon.openWindow = undefined;
-			};
-			this.openWindow.open(_this.map);
+			openBubbleOrLink.call(this, properties, event, polygon);
 		});
 	};
 
@@ -403,28 +371,28 @@
 
 									if ( ge.getInstance() !== undefined ) {
 
-										 var center = map.getCenter();
-										  var lookAt = ge.instance_.createLookAt('');
-										  var range = Math.pow(2, GoogleEarth.MAX_EARTH_ZOOM_ - map.getZoom());
-										  lookAt.setRange(range);
-										  lookAt.setLatitude(center.lat());
-										  lookAt.setLongitude(center.lng());
-										  lookAt.setHeading(0);
-										  lookAt.setAltitude(0);
-
-											// Teleport to the pre-tilt view immediately.
-										  ge.instance_.getOptions().setFlyToSpeed(5);
-										  ge.instance_.getView().setAbstractView(lookAt);
-											lookAt.setTilt(options.tilt);
-											// Fly to the tilt at regular speed in 200ms
-											ge.instance_.getOptions().setFlyToSpeed(0.75);
-											window.setTimeout(function() {
-												ge.instance_.getView().setAbstractView(lookAt);
-											}, 200);
-											// Set the flyto speed back to default after the animation starts.
-											window.setTimeout(function() {
-												ge.instance_.getOptions().setFlyToSpeed(1);
-											}, 250);
+										var center = map.getCenter();
+										var lookAt = ge.instance_.createLookAt('');
+										var range = Math.pow(2, GoogleEarth.MAX_EARTH_ZOOM_ - map.getZoom());
+										lookAt.setRange(range);
+										lookAt.setLatitude(center.lat());
+										lookAt.setLongitude(center.lng());
+										lookAt.setHeading(0);
+										lookAt.setAltitude(0);
+
+										// Teleport to the pre-tilt view immediately.
+										ge.instance_.getOptions().setFlyToSpeed(5);
+										ge.instance_.getView().setAbstractView(lookAt);
+										lookAt.setTilt(options.tilt);
+										// Fly to the tilt at regular speed in 200ms
+										ge.instance_.getOptions().setFlyToSpeed(0.75);
+										window.setTimeout(function() {
+											ge.instance_.getView().setAbstractView(lookAt);
+										}, 200);
+										// Set the flyto speed back to default after the animation starts.
+										window.setTimeout(function() {
+											ge.instance_.getOptions().setFlyToSpeed(1);
+										}, 250);
 
 									}
 									else {
@@ -532,6 +500,28 @@
 		}
 
 	};
+
+	function openBubbleOrLink(properties, event, obj) {
+		if (properties.link) {
+			window.location.href = properties.link;
+		} else if(properties.text !== '') {
+			openBubble.call(this, properties, event, obj);
+		}
+	}
+
+	function openBubble(properties, event, obj) {
+		if (this.openWindow != undefined) {
+			this.openWindow.close();
+		}
+		this.openWindow = new google.maps.InfoWindow();
+		this.openWindow.content = properties.text;
+		this.openWindow.position = event.latLng;
+		this.openWindow.closeclick = function () {
+			obj.openWindow = undefined;
+		};
+		this.openWindow.open(this.map);
+	}
+
 	this.setup();
 
 	return this;
diff --git a/includes/services/OpenLayers/jquery.openlayers.js b/includes/services/OpenLayers/jquery.openlayers.js
index 7d8f476..2de240e 100644
--- a/includes/services/OpenLayers/jquery.openlayers.js
+++ b/includes/services/OpenLayers/jquery.openlayers.js
@@ -1,7 +1,7 @@
 /**
  * JavaScript for OpenLayers maps in the Maps extension.
  * @see http://www.mediawiki.org/wiki/Extension:Maps
- * 
+ *
  * @author Jeroen De Dauw <jeroendedauw at gmail dot com>
  * @author Daniel Werner
  */
@@ -10,47 +10,49 @@
 
 	this.getOLMarker = function( markerLayer, markerData ) {
 		var marker;
-		
+
 		if ( markerData.icon != "" ) {
 			marker = new OpenLayers.Marker( markerData.lonlat, new OpenLayers.Icon( markerData.icon ) );
 		} else {
 			marker = new OpenLayers.Marker( markerData.lonlat, new OpenLayers.Icon( markerLayer.defaultIcon ) );
 		}
 
-		if ( markerData.text !== '' ) {
-			// This is the handler for the mousedown event on the marker, and displays the popup.
-			marker.events.register('mousedown', marker,
-				function( evt ) { 
-					var popup = new OpenLayers.Feature( markerLayer, markerData.lonlat ).createPopup( true ); 
+		// This is the handler for the mousedown event on the marker, and displays the popup.
+		marker.events.register('mousedown', marker,
+			function( evt ) {
+				if (markerData.link) {
+					window.location.href = markerData.link;
+				} else if(markerData.text !== '') {
+					var popup = new OpenLayers.Feature( markerLayer, markerData.lonlat ).createPopup( true );
 					popup.setContentHTML( markerData.text );
 					markerLayer.map.addPopup( popup );
 					OpenLayers.Event.stop( evt ); // Stop the event.
 				}
-			);
-		}	
+			}
+		);
 
 		return marker;
 	}
-	
+
 	this.addMarkers = function( map, options ) {
 		if ( !options.locations ) {
 			options.locations = [];
 		}
-		
-		var locations = options.locations;		
+
+		var locations = options.locations;
 		var bounds = null;
-				
+
 		if ( locations.length > 1 && ( options.centre === false || options.zoom === false ) ) {
 			bounds = new OpenLayers.Bounds();
 		}
-		
+
 		var groupLayers = new Object();
 		var groups = 0;
-		
+
 		for ( i = locations.length - 1; i >= 0; i-- ) {
-			
+
 			var location = locations[i];
-			
+
 			// Create a own marker-layer for the marker group:
 			if( ! groupLayers[ location.group ] ) {
 				// in case no group is specified, use default marker layer:				
@@ -61,30 +63,30 @@
 				// define default icon, one of ten in different colors, if more than ten layers, colors will repeat:
 				curLayer.defaultIcon = egMapsScriptPath + '/includes/services/OpenLayers/OpenLayers/img/marker' + ( ( groups + 10 ) % 10 ) + '.png';
 				map.addLayer( curLayer );
-				groupLayers[ location.group ] = curLayer;				
+				groupLayers[ location.group ] = curLayer;
 			} else {
 				// if markers of this group exist already, they have an own layer already
 				var curLayer = groupLayers[ location.group ];
 			}
-			
+
 			location.lonlat = new OpenLayers.LonLat( location.lon, location.lat );
-			
+
 			if ( !hasImageLayer ) {
 				location.lonlat.transform( new OpenLayers.Projection( "EPSG:4326" ), new OpenLayers.Projection( "EPSG:900913" ) );
 			}
-			
+
 			if ( bounds != null ) bounds.extend( location.lonlat ); // Extend the bounds when no center is set.
-            var marker = this.getOLMarker( curLayer, location );
-            this.markers.push({
-                    target: marker,
-                    data:location
-            });
+			var marker = this.getOLMarker( curLayer, location );
+			this.markers.push({
+				target: marker,
+				data:location
+			});
 			curLayer.addMarker( marker ); // Create and add the marker.
 		}
-		
+
 		if ( bounds != null ) map.zoomToExtent( bounds ); // If a bounds object has been created, use it to set the zoom and center.
 	}
-	
+
 	this.addControls = function( map, controls, mapElement ) {
 		// Add the controls.
 		for ( var i = controls.length - 1; i >= 0; i-- ) {
@@ -95,9 +97,9 @@
 				}
 
 				control = getValidControlName( controls[i] );
-				
+
 				if ( control ) {
-                    map.addControl(eval('new OpenLayers.Control.' + control + '() '));
+					map.addControl(eval('new OpenLayers.Control.' + control + '() '));
 				}
 			}
 			else {
@@ -105,103 +107,103 @@
 				controls[i].activate(); // And activate it.
 			}
 		}
-		
-		map.addControl( new OpenLayers.Control.Attribution() ); 
+
+		map.addControl( new OpenLayers.Control.Attribution() );
+	}
+
+	this.addLine = function(properties){
+		var pos = new Array();
+		for(var x = 0; x < properties.pos.length; x++){
+			var point = new OpenLayers.Geometry.Point(properties.pos[x].lon,properties.pos[x].lat);
+			point.transform(
+				new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+				map.getProjectionObject() // to Spherical Mercator Projection
+			);
+			pos.push(point);
+		}
+
+		var style = {
+			'strokeColor':properties.strokeColor,
+			'strokeWidth': properties.strokeWeight,
+			'strokeOpacity': properties.strokeOpacity
+		}
+
+		var line = new OpenLayers.Geometry.LineString(pos);
+		var lineFeature = new OpenLayers.Feature.Vector(line, properties, style);
+		this.lineLayer.addFeatures([lineFeature]);
+	}
+
+	this.addPolygon = function(properties){
+		var pos = new Array();
+		for(var x = 0; x < properties.pos.length; x++){
+			var point = new OpenLayers.Geometry.Point(properties.pos[x].lon,properties.pos[x].lat);
+			point.transform(
+				new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
+				map.getProjectionObject() // to Spherical Mercator Projection
+			);
+			pos.push(point);
+		}
+
+		var style = {
+			'strokeColor':properties.strokeColor,
+			'strokeWidth': properties.strokeWeight,
+			'strokeOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.strokeOpacity,
+			'fillColor': properties.fillColor,
+			'fillOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.fillOpacity
+		}
+
+		var polygon = new OpenLayers.Geometry.LinearRing(pos);
+		var polygonFeature = new OpenLayers.Feature.Vector(polygon, properties, style);
+		this.polygonLayer.addFeatures([polygonFeature]);
 	}
 
-    this.addLine = function(properties){
-        var pos = new Array();
-        for(var x = 0; x < properties.pos.length; x++){
-            var point = new OpenLayers.Geometry.Point(properties.pos[x].lon,properties.pos[x].lat);
-            point.transform(
-                new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-                map.getProjectionObject() // to Spherical Mercator Projection
-            );
-            pos.push(point);
-        }
-
-        var style = {
-            'strokeColor':properties.strokeColor,
-            'strokeWidth': properties.strokeWeight,
-            'strokeOpacity': properties.strokeOpacity
-        }
-
-        var line = new OpenLayers.Geometry.LineString(pos);
-        var lineFeature = new OpenLayers.Feature.Vector(line, {text:properties.text}, style);
-        this.lineLayer.addFeatures([lineFeature]);
-    }
-
-    this.addPolygon = function(properties){
-        var pos = new Array();
-        for(var x = 0; x < properties.pos.length; x++){
-            var point = new OpenLayers.Geometry.Point(properties.pos[x].lon,properties.pos[x].lat);
-            point.transform(
-                new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
-                map.getProjectionObject() // to Spherical Mercator Projection
-            );
-            pos.push(point);
-        }
-
-        var style = {
-            'strokeColor':properties.strokeColor,
-            'strokeWidth': properties.strokeWeight,
-            'strokeOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.strokeOpacity,
-            'fillColor': properties.fillColor,
-            'fillOpacity': properties.onlyVisibleOnHover === true ? 0 : properties.fillOpacity
-        }
-
-        var polygon = new OpenLayers.Geometry.LinearRing(pos);
-        var polygonFeature = new OpenLayers.Feature.Vector(polygon, properties, style);
-        this.polygonLayer.addFeatures([polygonFeature]);
-    }
-	
 	/**
 	 * Gets a valid control name (with excat lower and upper case letters),
 	 * or returns false when the control is not allowed.
 	 */
 	function getValidControlName( control ) {
 		var OLControls = [
-	        'ArgParser', 'Attribution', 'Button', 'DragFeature', 'DragPan', 
+			'ArgParser', 'Attribution', 'Button', 'DragFeature', 'DragPan',
 			'DrawFeature', 'EditingToolbar', 'GetFeature', 'KeyboardDefaults', 'LayerSwitcher',
 			'Measure', 'ModifyFeature', 'MouseDefaults', 'MousePosition', 'MouseToolbar',
 			'Navigation', 'NavigationHistory', 'NavToolbar', 'OverviewMap', 'Pan',
 			'Panel', 'PanPanel', 'PanZoom', 'PanZoomBar', 'Permalink',
-			'Scale', 'ScaleLine', 'SelectFeature', 'Snapping', 'Split', 
+			'Scale', 'ScaleLine', 'SelectFeature', 'Snapping', 'Split',
 			'WMSGetFeatureInfo', 'ZoomBox', 'ZoomIn', 'ZoomOut', 'ZoomPanel',
 			'ZoomToMaxExtent'
 		];
-		
+
 		for ( var i = OLControls.length - 1; i >= 0; i-- ) {
 			if ( control == OLControls[i].toLowerCase() ) {
 				return OLControls[i];
 			}
 		}
-		
+
 		return false;
 	}
 
-    var _this = this;
-    this.markers = [];
+	var _this = this;
+	this.markers = [];
 
 	// Remove the loading map message.
 	this.text( '' );
-	
+
 	// Create a new OpenLayers map with without any controls on it.
 	var mapOptions = {
 		controls: []
 	};
 
-    var hasImageLayer = false;
-    for ( i = 0, n = options.layers.length; i < n; i++ ) {
-        // Idieally this would check if the objecct is of type OpenLayers.layer.image
-        options.layers[i] = eval(options.layers[i])
-        if ( options.layers[i].options && options.layers[i].options.isImage === true ) {
-            hasImageLayer = true;
-            break;
-        }
-    }
-
-    if ( !hasImageLayer ) {
+	var hasImageLayer = false;
+	for ( i = 0, n = options.layers.length; i < n; i++ ) {
+		// Idieally this would check if the objecct is of type OpenLayers.layer.image
+		options.layers[i] = eval(options.layers[i])
+		if ( options.layers[i].options && options.layers[i].options.isImage === true ) {
+			hasImageLayer = true;
+			break;
+		}
+	}
+
+	if ( !hasImageLayer ) {
 		mapOptions.projection = new OpenLayers.Projection("EPSG:900913");
 		mapOptions.displayProjection = new OpenLayers.Projection("EPSG:4326");
 		mapOptions.units = "m";
@@ -220,117 +222,98 @@
 		map.addLayer(options.layers[i] );
 	}
 
-    //Add markers
+	//Add markers
 	this.addMarkers( map, options );
 	var centre = false;
 
-    //Add line layer if applicable
-    if(options.lines && options.lines.length > 0){
-        this.lineLayer = new OpenLayers.Layer.Vector("Line Layer");
-        this.lineLayer.events.on({
-            'featureselected':function(feature){
-                if(feature.feature.attributes.text != undefined && feature.feature.attributes.text != ''){
-                    var mousePos = map.getControlsByClass("OpenLayers.Control.MousePosition")[0].lastXy
-                    var lonlat = map.getLonLatFromPixel(mousePos);
-                    var popup = new OpenLayers.Popup(null,lonlat, null, feature.feature.attributes.text, true,function(){
-                        map.getControlsByClass('OpenLayers.Control.SelectFeature')[0].unselectAll();
-                        map.removePopup(this);
-                    })
-                    this.map.addPopup( popup );
-                }
-            },
-            'featureunselected':function(feature){
-                //do nothing
-            }
-        });
-
-        var controls = {
-            select: new OpenLayers.Control.SelectFeature(this.lineLayer,{
-                clickout: true, toggle: false,
-                multiple: true, hover: false
-            })
-        };
-
-        for(key in controls){
-            var control = controls[key];
-            map.addControl(control);
-            control.activate();
-        }
-
-        map.addLayer(this.lineLayer);
-        map.raiseLayer(this.lineLayer,-1);
-        map.resetLayersZIndex();
-
-        for ( var i = 0; i < options.lines.length; i++ ) {
-            this.addLine(options.lines[i]);
-        }
-    }
-
-    if(options.polygons && options.polygons.length > 0){
-        this.polygonLayer = new OpenLayers.Layer.Vector("Polygon Layer");
-
-        var controls = {
-            select: new OpenLayers.Control.SelectFeature(this.polygonLayer,{
-                clickout: true, toggle: false,
-                multiple: true, hover: true,
-                callbacks: {
-                    'over':function(feature){
-                        if(feature.attributes.onlyVisibleOnHover === true){
-                            var style = {
-                                'strokeColor':feature.attributes.strokeColor,
-                                'strokeWidth': feature.attributes.strokeWeight,
-                                'strokeOpacity': feature.attributes.strokeOpacity,
-                                'fillColor': feature.attributes.fillColor,
-                                'fillOpacity': feature.attributes.fillOpacity
-                            }
-                            _this.polygonLayer.drawFeature(feature,style);
-                        }
-                    },
-                    'out':function(feature){
-                        if(feature.attributes.onlyVisibleOnHover === true && _this.map.popups.length === 0){
-                            var style = {
-                                'strokeColor':feature.attributes.strokeColor,
-                                'strokeWidth': feature.attributes.strokeWeight,
-                                'strokeOpacity': 0,
-                                'fillColor': feature.attributes.fillColor,
-                                'fillOpacity': 0
-                            }
-                            _this.polygonLayer.drawFeature(feature,style);
-                        }
-                    },
-                    'click':function(feature){
-                        if(feature.attributes.text != undefined && feature.attributes.text != ''){
-                            var mousePos = map.getControlsByClass("OpenLayers.Control.MousePosition")[0].lastXy
-                            var lonlat = map.getLonLatFromPixel(mousePos);
-                            var popup = new OpenLayers.Popup(null,lonlat, null, feature.attributes.text, true,function(){
-                                map.getControlsByClass('OpenLayers.Control.SelectFeature')[0].unselectAll();
-                                map.removePopup(this);
-                            })
-                            this.map.addPopup( popup );
-                        }
-                    }
-                }
-            })
-        };
-
-        for(key in controls){
-            var control = controls[key];
-            map.addControl(control);
-            control.activate();
-        }
-
-        map.addLayer(this.polygonLayer);
-        map.raiseLayer(this.polygonLayer,-1);
-        map.resetLayersZIndex();
-
-        for ( var i = 0; i < options.polygons.length; i++ ) {
-            this.addPolygon(options.polygons[i]);
-        }
-    }
-
-    if ( options.zoom !== false ) {
-        map.zoomTo( options.zoom );
-    }
+	//Add line layer if applicable
+	if(options.lines && options.lines.length > 0){
+		this.lineLayer = new OpenLayers.Layer.Vector("Line Layer");
+
+		var controls = {
+			select: new OpenLayers.Control.SelectFeature(this.lineLayer,{
+				clickout: true, toggle: false,
+				multiple: true, hover: true,
+				callbacks: {
+					'click':function(feature){
+						openBubbleOrLink(feature.attributes);
+					}
+				}
+			})
+		};
+
+		for(key in controls){
+			var control = controls[key];
+			map.addControl(control);
+			control.activate();
+		}
+
+		map.addLayer(this.lineLayer);
+		map.raiseLayer(this.lineLayer,-1);
+		map.resetLayersZIndex();
+
+		for ( var i = 0; i < options.lines.length; i++ ) {
+			this.addLine(options.lines[i]);
+		}
+	}
+
+	if(options.polygons && options.polygons.length > 0){
+		this.polygonLayer = new OpenLayers.Layer.Vector("Polygon Layer");
+
+		var controls = {
+			select: new OpenLayers.Control.SelectFeature(this.polygonLayer,{
+				clickout: true, toggle: false,
+				multiple: true, hover: true,
+				callbacks: {
+					'over':function(feature){
+						if(feature.attributes.onlyVisibleOnHover === true){
+							var style = {
+								'strokeColor':feature.attributes.strokeColor,
+								'strokeWidth': feature.attributes.strokeWeight,
+								'strokeOpacity': feature.attributes.strokeOpacity,
+								'fillColor': feature.attributes.fillColor,
+								'fillOpacity': feature.attributes.fillOpacity
+							}
+							_this.polygonLayer.drawFeature(feature,style);
+						}
+					},
+					'out':function(feature){
+						if(feature.attributes.onlyVisibleOnHover === true && _this.map.popups.length === 0){
+							var style = {
+								'strokeColor':feature.attributes.strokeColor,
+								'strokeWidth': feature.attributes.strokeWeight,
+								'strokeOpacity': 0,
+								'fillColor': feature.attributes.fillColor,
+								'fillOpacity': 0
+							}
+							_this.polygonLayer.drawFeature(feature,style);
+						}
+					},
+					'click':function(feature){
+						openBubbleOrLink(feature.attributes);
+					}
+				}
+			})
+		};
+
+		for(key in controls){
+			var control = controls[key];
+			map.addControl(control);
+			control.activate();
+		}
+
+		map.addLayer(this.polygonLayer);
+		map.raiseLayer(this.polygonLayer,-1);
+		map.resetLayersZIndex();
+
+		for ( var i = 0; i < options.polygons.length; i++ ) {
+			this.addPolygon(options.polygons[i]);
+		}
+	}
+
+	if ( options.zoom !== false ) {
+		map.zoomTo( options.zoom );
+	}
 
 	if ( options.centre === false ) {
 		if ( options.locations.length == 1 ) {
@@ -343,82 +326,101 @@
 	else { // When the center is provided, set it.
 		centre = new OpenLayers.LonLat( options.centre.lon, options.centre.lat );
 	}
-	
+
 	if ( centre !== false ) {
 		if ( !hasImageLayer ) {
 			centre.transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:900913"));
-            map.setCenter( centre );
+			map.setCenter( centre );
 		}else{
-            map.zoomToMaxExtent();
-        }
+			map.zoomToMaxExtent();
+		}
 	}
-	
+
 	if ( options.resizable ) {
 		mw.loader.using( 'ext.maps.resizable', function() {
 			_this.resizable();
 		} );
 	}
 
-    if(options.copycoords){
-        map.div.oncontextmenu = function(){return false;};
-        OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
-            defaultHandlerOptions: {
-                'single': true,
-                'double': false,
-                'pixelTolerance': 0,
-                'stopSingle': false,
-                'stopDouble': false
-            },
-            handleRightClicks:true,
-
-            initialize: function(options) {
-                this.handlerOptions = OpenLayers.Util.extend(
-                    {}, this.defaultHandlerOptions
-                );
-                OpenLayers.Control.prototype.initialize.apply(
-                    this, arguments
-                );
-                this.handler = new OpenLayers.Handler.Click(
-                    this, this.eventMethods, this.handlerOptions
-                );
-            }
-
-        })
-        var click = new OpenLayers.Control.Click({
-            eventMethods:{
-                'rightclick': function(e){
-                    var lonlat = map.getLonLatFromViewPortPx(e.xy);
-                    lonlat = lonlat.transform(new OpenLayers.Projection("EPSG:900913"), new OpenLayers.Projection("EPSG:4326"));
-                    prompt(mediaWiki.msg( 'maps-copycoords-prompt' ),lonlat.lat+','+lonlat.lon);
-                }
-            }
-        });
-        map.addControl(click);
-        click.activate();
-    }
-
-    if(options.markercluster){
-        alert(mediaWiki.msg('maps-clustering-unsupportedservice'));
-    }
-
-    if(options.searchmarkers){
-        var searchBox = $('<div style="text-align: right;">'+mediaWiki.msg( 'maps-searchmarkers-text' )+': <input type="text" /></div>');
-        $(this.map.div).before(searchBox);
-
-        searchBox.find('input').keyup(function(e){
-            for(var i = 0; i < _this.markers.length; i++){
-                var haystack = '';
-                var marker = _this.markers[i];
-                if(options.searchmarkers == 'title'){
-                    haystack = marker.data.title;
-                }else if(options.searchmarkers == 'all'){
-                    haystack = marker.data.title+marker.data.text;
-                }
-
-                marker.target.display(haystack.toLowerCase().indexOf(e.target.value.toLowerCase()) != -1);
-            }
-        });
-    }
+	if(options.copycoords){
+		map.div.oncontextmenu = function(){return false;};
+		OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {
+			defaultHandlerOptions: {
+				'single': true,
+				'double': false,
+				'pixelTolerance': 0,
+				'stopSingle': false,
+				'stopDouble': false
+			},
+			handleRightClicks:true,
+
+			initialize: function(options) {
+				this.handlerOptions = OpenLayers.Util.extend(
+					{}, this.defaultHandlerOptions
+				);
+				OpenLayers.Control.prototype.initialize.apply(
+					this, arguments
+				);
+				this.handler = new OpenLayers.Handler.Click(
+					this, this.eventMethods, this.handlerOptions
+				);
+			}
+
+		})
+		var click = new OpenLayers.Control.Click({
+			eventMethods:{
+				'rightclick': function(e){
+					var lonlat = map.getLonLatFromViewPortPx(e.xy);
+					lonlat = lonlat.transform(new OpenLayers.Projection("EPSG:900913"), new OpenLayers.Projection("EPSG:4326"));
+					prompt(mediaWiki.msg( 'maps-copycoords-prompt' ),lonlat.lat+','+lonlat.lon);
+				}
+			}
+		});
+		map.addControl(click);
+		click.activate();
+	}
+
+	if(options.markercluster){
+		alert(mediaWiki.msg('maps-clustering-unsupportedservice'));
+	}
+
+	if(options.searchmarkers){
+		var searchBox = $('<div style="text-align: right;">'+mediaWiki.msg( 'maps-searchmarkers-text' )+': <input type="text" /></div>');
+		$(this.map.div).before(searchBox);
+
+		searchBox.find('input').keyup(function(e){
+			for(var i = 0; i < _this.markers.length; i++){
+				var haystack = '';
+				var marker = _this.markers[i];
+				if(options.searchmarkers == 'title'){
+					haystack = marker.data.title;
+				}else if(options.searchmarkers == 'all'){
+					haystack = marker.data.title+marker.data.text;
+				}
+
+				marker.target.display(haystack.toLowerCase().indexOf(e.target.value.toLowerCase()) != -1);
+			}
+		});
+	}
+
+	function openBubbleOrLink(properties) {
+		if (properties.link) {
+			window.location.href = properties.link;
+		} else if(properties.text !== '') {
+			openBubble(properties);
+		}
+	}
+
+	function openBubble(properties) {
+		var mousePos = map.getControlsByClass("OpenLayers.Control.MousePosition")[0].lastXy
+		var lonlat = map.getLonLatFromPixel(mousePos);
+		var popup = new OpenLayers.Popup(null,lonlat, null, properties.text, true,function(){
+			map.getControlsByClass('OpenLayers.Control.SelectFeature')[0].unselectAll();
+			map.removePopup(this);
+		})
+		_this.map.addPopup( popup );
+	}
+
 	return this;
-	
+
 }; })( jQuery );
-- 
1.7.9.5

